/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.bsc.langgraph4j.langsmith.gen.api;

import org.bsc.langgraph4j.langsmith.gen.ApiClient;
import org.bsc.langgraph4j.langsmith.gen.ApiException;
import org.bsc.langgraph4j.langsmith.gen.ApiResponse;
import org.bsc.langgraph4j.langsmith.gen.Configuration;
import org.bsc.langgraph4j.langsmith.gen.Pair;

import org.bsc.langgraph4j.langsmith.gen.model.HTTPValidationError;
import java.time.OffsetDateTime;
import org.bsc.langgraph4j.langsmith.gen.model.RunSchema;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import java.util.concurrent.CompletableFuture;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T18:06:49.500560+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class RunApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RunApi() {
    this(Configuration.getDefaultApiClient());
  }

  public RunApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String> response) {
    String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
    return new ApiException(response.statusCode(), message, response.headers(), response.body());
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Read Run
   * Get a specific run.
   * @param runId  (required)
   * @param sessionId  (optional)
   * @param startTime  (optional)
   * @param excludeS3StoredAttributes  (optional, default to false)
   * @param excludeSerialized  (optional, default to false)
   * @return CompletableFuture&lt;RunSchema&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<RunSchema> readRunApiV1RunsRunIdGet(@javax.annotation.Nonnull UUID runId, @javax.annotation.Nullable UUID sessionId, @javax.annotation.Nullable OffsetDateTime startTime, @javax.annotation.Nullable Boolean excludeS3StoredAttributes, @javax.annotation.Nullable Boolean excludeSerialized) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = readRunApiV1RunsRunIdGetRequestBuilder(runId, sessionId, startTime, excludeS3StoredAttributes, excludeSerialized);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("readRunApiV1RunsRunIdGet", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<RunSchema>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Read Run
   * Get a specific run.
   * @param runId  (required)
   * @param sessionId  (optional)
   * @param startTime  (optional)
   * @param excludeS3StoredAttributes  (optional, default to false)
   * @param excludeSerialized  (optional, default to false)
   * @return CompletableFuture&lt;ApiResponse&lt;RunSchema&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<RunSchema>> readRunApiV1RunsRunIdGetWithHttpInfo(@javax.annotation.Nonnull UUID runId, @javax.annotation.Nullable UUID sessionId, @javax.annotation.Nullable OffsetDateTime startTime, @javax.annotation.Nullable Boolean excludeS3StoredAttributes, @javax.annotation.Nullable Boolean excludeSerialized) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = readRunApiV1RunsRunIdGetRequestBuilder(runId, sessionId, startTime, excludeS3StoredAttributes, excludeSerialized);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("readRunApiV1RunsRunIdGet", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<RunSchema>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<RunSchema>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder readRunApiV1RunsRunIdGetRequestBuilder(@javax.annotation.Nonnull UUID runId, @javax.annotation.Nullable UUID sessionId, @javax.annotation.Nullable OffsetDateTime startTime, @javax.annotation.Nullable Boolean excludeS3StoredAttributes, @javax.annotation.Nullable Boolean excludeSerialized) throws ApiException {
    // verify the required parameter 'runId' is set
    if (runId == null) {
      throw new ApiException(400, "Missing the required parameter 'runId' when calling readRunApiV1RunsRunIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/runs/{run_id}"
        .replace("{run_id}", ApiClient.urlEncode(runId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "session_id";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("session_id", sessionId));
    localVarQueryParameterBaseName = "start_time";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_time", startTime));
    localVarQueryParameterBaseName = "exclude_s3_stored_attributes";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("exclude_s3_stored_attributes", excludeS3StoredAttributes));
    localVarQueryParameterBaseName = "exclude_serialized";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("exclude_serialized", excludeSerialized));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update Run
   * Update a run.
   * @param runId  (required)
   * @return CompletableFuture&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Object> updateRunApiV1RunsRunIdPatch(@javax.annotation.Nonnull UUID runId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateRunApiV1RunsRunIdPatchRequestBuilder(runId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateRunApiV1RunsRunIdPatch", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Object>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update Run
   * Update a run.
   * @param runId  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Object&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Object>> updateRunApiV1RunsRunIdPatchWithHttpInfo(@javax.annotation.Nonnull UUID runId) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = updateRunApiV1RunsRunIdPatchRequestBuilder(runId);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("updateRunApiV1RunsRunIdPatch", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<Object>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Object>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder updateRunApiV1RunsRunIdPatchRequestBuilder(@javax.annotation.Nonnull UUID runId) throws ApiException {
    // verify the required parameter 'runId' is set
    if (runId == null) {
      throw new ApiException(400, "Missing the required parameter 'runId' when calling updateRunApiV1RunsRunIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/runs/{run_id}"
        .replace("{run_id}", ApiClient.urlEncode(runId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
