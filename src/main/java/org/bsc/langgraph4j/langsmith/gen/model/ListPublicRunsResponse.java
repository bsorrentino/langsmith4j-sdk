/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.bsc.langgraph4j.langsmith.gen.model.CursorsValue;
import org.bsc.langgraph4j.langsmith.gen.model.RunPublicSchema;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * ListPublicRunsResponse
 */
@JsonPropertyOrder({
  ListPublicRunsResponse.JSON_PROPERTY_RUNS,
  ListPublicRunsResponse.JSON_PROPERTY_CURSORS,
  ListPublicRunsResponse.JSON_PROPERTY_PARSED_QUERY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class ListPublicRunsResponse {
  public static final String JSON_PROPERTY_RUNS = "runs";
  @javax.annotation.Nonnull
  private List<RunPublicSchema> runs = new ArrayList<>();

  public static final String JSON_PROPERTY_CURSORS = "cursors";
  @javax.annotation.Nonnull
  private Map<String, CursorsValue> cursors = new HashMap<>();

  public static final String JSON_PROPERTY_PARSED_QUERY = "parsed_query";
  private JsonNullable<String> parsedQuery = JsonNullable.<String>undefined();

  public ListPublicRunsResponse() { 
  }

  public ListPublicRunsResponse runs(@javax.annotation.Nonnull List<RunPublicSchema> runs) {
    this.runs = runs;
    return this;
  }

  public ListPublicRunsResponse addRunsItem(RunPublicSchema runsItem) {
    if (this.runs == null) {
      this.runs = new ArrayList<>();
    }
    this.runs.add(runsItem);
    return this;
  }

  /**
   * Get runs
   * @return runs
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RUNS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<RunPublicSchema> getRuns() {
    return runs;
  }


  @JsonProperty(JSON_PROPERTY_RUNS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRuns(@javax.annotation.Nonnull List<RunPublicSchema> runs) {
    this.runs = runs;
  }


  public ListPublicRunsResponse cursors(@javax.annotation.Nonnull Map<String, CursorsValue> cursors) {
    this.cursors = cursors;
    return this;
  }

  public ListPublicRunsResponse putCursorsItem(String key, CursorsValue cursorsItem) {
    if (this.cursors == null) {
      this.cursors = new HashMap<>();
    }
    this.cursors.put(key, cursorsItem);
    return this;
  }

  /**
   * Get cursors
   * @return cursors
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURSORS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)
  public Map<String, CursorsValue> getCursors() {
    return cursors;
  }


  @JsonProperty(JSON_PROPERTY_CURSORS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.ALWAYS)
  public void setCursors(@javax.annotation.Nonnull Map<String, CursorsValue> cursors) {
    this.cursors = cursors;
  }


  public ListPublicRunsResponse parsedQuery(@javax.annotation.Nullable String parsedQuery) {
    this.parsedQuery = JsonNullable.<String>of(parsedQuery);
    return this;
  }

  /**
   * Get parsedQuery
   * @return parsedQuery
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getParsedQuery() {
        return parsedQuery.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARSED_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getParsedQuery_JsonNullable() {
    return parsedQuery;
  }
  
  @JsonProperty(JSON_PROPERTY_PARSED_QUERY)
  public void setParsedQuery_JsonNullable(JsonNullable<String> parsedQuery) {
    this.parsedQuery = parsedQuery;
  }

  public void setParsedQuery(@javax.annotation.Nullable String parsedQuery) {
    this.parsedQuery = JsonNullable.<String>of(parsedQuery);
  }


  /**
   * Return true if this ListPublicRunsResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPublicRunsResponse listPublicRunsResponse = (ListPublicRunsResponse) o;
    return Objects.equals(this.runs, listPublicRunsResponse.runs) &&
        Objects.equals(this.cursors, listPublicRunsResponse.cursors) &&
        equalsNullable(this.parsedQuery, listPublicRunsResponse.parsedQuery);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(runs, cursors, hashCodeNullable(parsedQuery));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPublicRunsResponse {\n");
    sb.append("    runs: ").append(toIndentedString(runs)).append("\n");
    sb.append("    cursors: ").append(toIndentedString(cursors)).append("\n");
    sb.append("    parsedQuery: ").append(toIndentedString(parsedQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `runs` to the URL query string
    if (getRuns() != null) {
      for (int i = 0; i < getRuns().size(); i++) {
        if (getRuns().get(i) != null) {
          joiner.add(getRuns().get(i).toUrlQueryString(String.format("%sruns%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `cursors` to the URL query string
    if (getCursors() != null) {
      for (String _key : getCursors().keySet()) {
        if (getCursors().get(_key) != null) {
          joiner.add(getCursors().get(_key).toUrlQueryString(String.format("%scursors%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `parsed_query` to the URL query string
    if (getParsedQuery() != null) {
      joiner.add(String.format("%sparsed_query%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getParsedQuery()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private ListPublicRunsResponse instance;

    public Builder() {
      this(new ListPublicRunsResponse());
    }

    protected Builder(ListPublicRunsResponse instance) {
      this.instance = instance;
    }

    public ListPublicRunsResponse.Builder runs(List<RunPublicSchema> runs) {
      this.instance.runs = runs;
      return this;
    }
    public ListPublicRunsResponse.Builder cursors(Map<String, CursorsValue> cursors) {
      this.instance.cursors = cursors;
      return this;
    }
    public ListPublicRunsResponse.Builder parsedQuery(String parsedQuery) {
      this.instance.parsedQuery = JsonNullable.<String>of(parsedQuery);
      return this;
    }
    public ListPublicRunsResponse.Builder parsedQuery(JsonNullable<String> parsedQuery) {
      this.instance.parsedQuery = parsedQuery;
      return this;
    }


    /**
    * returns a built ListPublicRunsResponse instance.
    *
    * The builder is not reusable.
    */
    public ListPublicRunsResponse build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static ListPublicRunsResponse.Builder builder() {
    return new ListPublicRunsResponse.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public ListPublicRunsResponse.Builder toBuilder() {
    return new ListPublicRunsResponse.Builder()
      .runs(getRuns())
      .cursors(getCursors())
      .parsedQuery(getParsedQuery());
  }

}

