/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.bsc.langgraph4j.langsmith.gen.model.Tagging;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * TagValueWithTaggings
 */
@JsonPropertyOrder({
  TagValueWithTaggings.JSON_PROPERTY_VALUE,
  TagValueWithTaggings.JSON_PROPERTY_DESCRIPTION,
  TagValueWithTaggings.JSON_PROPERTY_ID,
  TagValueWithTaggings.JSON_PROPERTY_TAG_KEY_ID,
  TagValueWithTaggings.JSON_PROPERTY_CREATED_AT,
  TagValueWithTaggings.JSON_PROPERTY_UPDATED_AT,
  TagValueWithTaggings.JSON_PROPERTY_TAGGINGS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class TagValueWithTaggings {
  public static final String JSON_PROPERTY_VALUE = "value";
  @javax.annotation.Nonnull
  private String value;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_TAG_KEY_ID = "tag_key_id";
  @javax.annotation.Nonnull
  private UUID tagKeyId;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_TAGGINGS = "taggings";
  @javax.annotation.Nullable
  private List<Tagging> taggings = new ArrayList<>();

  public TagValueWithTaggings() { 
  }

  public TagValueWithTaggings value(@javax.annotation.Nonnull String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(@javax.annotation.Nonnull String value) {
    this.value = value;
  }


  public TagValueWithTaggings description(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
  }


  public TagValueWithTaggings id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public TagValueWithTaggings tagKeyId(@javax.annotation.Nonnull UUID tagKeyId) {
    this.tagKeyId = tagKeyId;
    return this;
  }

  /**
   * Get tagKeyId
   * @return tagKeyId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAG_KEY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getTagKeyId() {
    return tagKeyId;
  }


  @JsonProperty(JSON_PROPERTY_TAG_KEY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTagKeyId(@javax.annotation.Nonnull UUID tagKeyId) {
    this.tagKeyId = tagKeyId;
  }


  public TagValueWithTaggings createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public TagValueWithTaggings updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public TagValueWithTaggings taggings(@javax.annotation.Nullable List<Tagging> taggings) {
    this.taggings = taggings;
    return this;
  }

  public TagValueWithTaggings addTaggingsItem(Tagging taggingsItem) {
    if (this.taggings == null) {
      this.taggings = new ArrayList<>();
    }
    this.taggings.add(taggingsItem);
    return this;
  }

  /**
   * Get taggings
   * @return taggings
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGGINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Tagging> getTaggings() {
    return taggings;
  }


  @JsonProperty(JSON_PROPERTY_TAGGINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaggings(@javax.annotation.Nullable List<Tagging> taggings) {
    this.taggings = taggings;
  }


  /**
   * Return true if this TagValueWithTaggings object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagValueWithTaggings tagValueWithTaggings = (TagValueWithTaggings) o;
    return Objects.equals(this.value, tagValueWithTaggings.value) &&
        equalsNullable(this.description, tagValueWithTaggings.description) &&
        Objects.equals(this.id, tagValueWithTaggings.id) &&
        Objects.equals(this.tagKeyId, tagValueWithTaggings.tagKeyId) &&
        Objects.equals(this.createdAt, tagValueWithTaggings.createdAt) &&
        Objects.equals(this.updatedAt, tagValueWithTaggings.updatedAt) &&
        Objects.equals(this.taggings, tagValueWithTaggings.taggings);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, hashCodeNullable(description), id, tagKeyId, createdAt, updatedAt, taggings);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagValueWithTaggings {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    tagKeyId: ").append(toIndentedString(tagKeyId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    taggings: ").append(toIndentedString(taggings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `value` to the URL query string
    if (getValue() != null) {
      joiner.add(String.format("%svalue%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getValue()))));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `tag_key_id` to the URL query string
    if (getTagKeyId() != null) {
      joiner.add(String.format("%stag_key_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTagKeyId()))));
    }

    // add `created_at` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%screated_at%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCreatedAt()))));
    }

    // add `updated_at` to the URL query string
    if (getUpdatedAt() != null) {
      joiner.add(String.format("%supdated_at%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUpdatedAt()))));
    }

    // add `taggings` to the URL query string
    if (getTaggings() != null) {
      for (int i = 0; i < getTaggings().size(); i++) {
        if (getTaggings().get(i) != null) {
          joiner.add(getTaggings().get(i).toUrlQueryString(String.format("%staggings%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

    public static class Builder {

    private TagValueWithTaggings instance;

    public Builder() {
      this(new TagValueWithTaggings());
    }

    protected Builder(TagValueWithTaggings instance) {
      this.instance = instance;
    }

    public TagValueWithTaggings.Builder value(String value) {
      this.instance.value = value;
      return this;
    }
    public TagValueWithTaggings.Builder description(String description) {
      this.instance.description = JsonNullable.<String>of(description);
      return this;
    }
    public TagValueWithTaggings.Builder description(JsonNullable<String> description) {
      this.instance.description = description;
      return this;
    }
    public TagValueWithTaggings.Builder id(UUID id) {
      this.instance.id = id;
      return this;
    }
    public TagValueWithTaggings.Builder tagKeyId(UUID tagKeyId) {
      this.instance.tagKeyId = tagKeyId;
      return this;
    }
    public TagValueWithTaggings.Builder createdAt(OffsetDateTime createdAt) {
      this.instance.createdAt = createdAt;
      return this;
    }
    public TagValueWithTaggings.Builder updatedAt(OffsetDateTime updatedAt) {
      this.instance.updatedAt = updatedAt;
      return this;
    }
    public TagValueWithTaggings.Builder taggings(List<Tagging> taggings) {
      this.instance.taggings = taggings;
      return this;
    }


    /**
    * returns a built TagValueWithTaggings instance.
    *
    * The builder is not reusable.
    */
    public TagValueWithTaggings build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static TagValueWithTaggings.Builder builder() {
    return new TagValueWithTaggings.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public TagValueWithTaggings.Builder toBuilder() {
    return new TagValueWithTaggings.Builder()
      .value(getValue())
      .description(getDescription())
      .id(getId())
      .tagKeyId(getTagKeyId())
      .createdAt(getCreatedAt())
      .updatedAt(getUpdatedAt())
      .taggings(getTaggings());
  }

}

