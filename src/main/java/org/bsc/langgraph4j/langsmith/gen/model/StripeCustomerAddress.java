/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * Stripe customer address.
 */
@JsonPropertyOrder({
  StripeCustomerAddress.JSON_PROPERTY_LINE1,
  StripeCustomerAddress.JSON_PROPERTY_LINE2,
  StripeCustomerAddress.JSON_PROPERTY_CITY,
  StripeCustomerAddress.JSON_PROPERTY_STATE,
  StripeCustomerAddress.JSON_PROPERTY_POSTAL_CODE,
  StripeCustomerAddress.JSON_PROPERTY_COUNTRY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class StripeCustomerAddress {
  public static final String JSON_PROPERTY_LINE1 = "line1";
  @javax.annotation.Nonnull
  private String line1;

  public static final String JSON_PROPERTY_LINE2 = "line2";
  private JsonNullable<String> line2 = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CITY = "city";
  @javax.annotation.Nonnull
  private String city;

  public static final String JSON_PROPERTY_STATE = "state";
  private JsonNullable<String> state = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_POSTAL_CODE = "postal_code";
  @javax.annotation.Nonnull
  private String postalCode;

  public static final String JSON_PROPERTY_COUNTRY = "country";
  @javax.annotation.Nonnull
  private String country;

  public StripeCustomerAddress() { 
  }

  public StripeCustomerAddress line1(@javax.annotation.Nonnull String line1) {
    this.line1 = line1;
    return this;
  }

  /**
   * Get line1
   * @return line1
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LINE1)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getLine1() {
    return line1;
  }


  @JsonProperty(JSON_PROPERTY_LINE1)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLine1(@javax.annotation.Nonnull String line1) {
    this.line1 = line1;
  }


  public StripeCustomerAddress line2(@javax.annotation.Nullable String line2) {
    this.line2 = JsonNullable.<String>of(line2);
    return this;
  }

  /**
   * Get line2
   * @return line2
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getLine2() {
        return line2.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LINE2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getLine2_JsonNullable() {
    return line2;
  }
  
  @JsonProperty(JSON_PROPERTY_LINE2)
  public void setLine2_JsonNullable(JsonNullable<String> line2) {
    this.line2 = line2;
  }

  public void setLine2(@javax.annotation.Nullable String line2) {
    this.line2 = JsonNullable.<String>of(line2);
  }


  public StripeCustomerAddress city(@javax.annotation.Nonnull String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCity() {
    return city;
  }


  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCity(@javax.annotation.Nonnull String city) {
    this.city = city;
  }


  public StripeCustomerAddress state(@javax.annotation.Nullable String state) {
    this.state = JsonNullable.<String>of(state);
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getState() {
        return state.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getState_JsonNullable() {
    return state;
  }
  
  @JsonProperty(JSON_PROPERTY_STATE)
  public void setState_JsonNullable(JsonNullable<String> state) {
    this.state = state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = JsonNullable.<String>of(state);
  }


  public StripeCustomerAddress postalCode(@javax.annotation.Nonnull String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPostalCode() {
    return postalCode;
  }


  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPostalCode(@javax.annotation.Nonnull String postalCode) {
    this.postalCode = postalCode;
  }


  public StripeCustomerAddress country(@javax.annotation.Nonnull String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCountry() {
    return country;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountry(@javax.annotation.Nonnull String country) {
    this.country = country;
  }


  /**
   * Return true if this StripeCustomerAddress object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StripeCustomerAddress stripeCustomerAddress = (StripeCustomerAddress) o;
    return Objects.equals(this.line1, stripeCustomerAddress.line1) &&
        equalsNullable(this.line2, stripeCustomerAddress.line2) &&
        Objects.equals(this.city, stripeCustomerAddress.city) &&
        equalsNullable(this.state, stripeCustomerAddress.state) &&
        Objects.equals(this.postalCode, stripeCustomerAddress.postalCode) &&
        Objects.equals(this.country, stripeCustomerAddress.country);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(line1, hashCodeNullable(line2), city, hashCodeNullable(state), postalCode, country);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StripeCustomerAddress {\n");
    sb.append("    line1: ").append(toIndentedString(line1)).append("\n");
    sb.append("    line2: ").append(toIndentedString(line2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `line1` to the URL query string
    if (getLine1() != null) {
      joiner.add(String.format("%sline1%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLine1()))));
    }

    // add `line2` to the URL query string
    if (getLine2() != null) {
      joiner.add(String.format("%sline2%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLine2()))));
    }

    // add `city` to the URL query string
    if (getCity() != null) {
      joiner.add(String.format("%scity%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCity()))));
    }

    // add `state` to the URL query string
    if (getState() != null) {
      joiner.add(String.format("%sstate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getState()))));
    }

    // add `postal_code` to the URL query string
    if (getPostalCode() != null) {
      joiner.add(String.format("%spostal_code%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPostalCode()))));
    }

    // add `country` to the URL query string
    if (getCountry() != null) {
      joiner.add(String.format("%scountry%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCountry()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private StripeCustomerAddress instance;

    public Builder() {
      this(new StripeCustomerAddress());
    }

    protected Builder(StripeCustomerAddress instance) {
      this.instance = instance;
    }

    public StripeCustomerAddress.Builder line1(String line1) {
      this.instance.line1 = line1;
      return this;
    }
    public StripeCustomerAddress.Builder line2(String line2) {
      this.instance.line2 = JsonNullable.<String>of(line2);
      return this;
    }
    public StripeCustomerAddress.Builder line2(JsonNullable<String> line2) {
      this.instance.line2 = line2;
      return this;
    }
    public StripeCustomerAddress.Builder city(String city) {
      this.instance.city = city;
      return this;
    }
    public StripeCustomerAddress.Builder state(String state) {
      this.instance.state = JsonNullable.<String>of(state);
      return this;
    }
    public StripeCustomerAddress.Builder state(JsonNullable<String> state) {
      this.instance.state = state;
      return this;
    }
    public StripeCustomerAddress.Builder postalCode(String postalCode) {
      this.instance.postalCode = postalCode;
      return this;
    }
    public StripeCustomerAddress.Builder country(String country) {
      this.instance.country = country;
      return this;
    }


    /**
    * returns a built StripeCustomerAddress instance.
    *
    * The builder is not reusable.
    */
    public StripeCustomerAddress build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static StripeCustomerAddress.Builder builder() {
    return new StripeCustomerAddress.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public StripeCustomerAddress.Builder toBuilder() {
    return new StripeCustomerAddress.Builder()
      .line1(getLine1())
      .line2(getLine2())
      .city(getCity())
      .state(getState())
      .postalCode(getPostalCode())
      .country(getCountry());
  }

}

