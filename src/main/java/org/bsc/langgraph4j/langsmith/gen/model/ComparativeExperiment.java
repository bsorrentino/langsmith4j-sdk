/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.bsc.langgraph4j.langsmith.gen.model.SimpleExperimentInfo;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * ComparativeExperiment schema.
 */
@JsonPropertyOrder({
  ComparativeExperiment.JSON_PROPERTY_ID,
  ComparativeExperiment.JSON_PROPERTY_NAME,
  ComparativeExperiment.JSON_PROPERTY_DESCRIPTION,
  ComparativeExperiment.JSON_PROPERTY_TENANT_ID,
  ComparativeExperiment.JSON_PROPERTY_CREATED_AT,
  ComparativeExperiment.JSON_PROPERTY_MODIFIED_AT,
  ComparativeExperiment.JSON_PROPERTY_REFERENCE_DATASET_ID,
  ComparativeExperiment.JSON_PROPERTY_EXTRA,
  ComparativeExperiment.JSON_PROPERTY_EXPERIMENTS_INFO,
  ComparativeExperiment.JSON_PROPERTY_FEEDBACK_STATS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class ComparativeExperiment {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_NAME = "name";
  private JsonNullable<String> name = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TENANT_ID = "tenant_id";
  @javax.annotation.Nonnull
  private UUID tenantId;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_MODIFIED_AT = "modified_at";
  @javax.annotation.Nonnull
  private OffsetDateTime modifiedAt;

  public static final String JSON_PROPERTY_REFERENCE_DATASET_ID = "reference_dataset_id";
  @javax.annotation.Nonnull
  private UUID referenceDatasetId;

  public static final String JSON_PROPERTY_EXTRA = "extra";
  private JsonNullable<Object> extra = JsonNullable.<Object>undefined();

  public static final String JSON_PROPERTY_EXPERIMENTS_INFO = "experiments_info";
  @javax.annotation.Nonnull
  private List<SimpleExperimentInfo> experimentsInfo = new ArrayList<>();

  public static final String JSON_PROPERTY_FEEDBACK_STATS = "feedback_stats";
  private JsonNullable<Object> feedbackStats = JsonNullable.<Object>undefined();

  public ComparativeExperiment() { 
  }

  public ComparativeExperiment id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public ComparativeExperiment name(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getName() {
        return name.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getName_JsonNullable() {
    return name;
  }
  
  @JsonProperty(JSON_PROPERTY_NAME)
  public void setName_JsonNullable(JsonNullable<String> name) {
    this.name = name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = JsonNullable.<String>of(name);
  }


  public ComparativeExperiment description(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
  }


  public ComparativeExperiment tenantId(@javax.annotation.Nonnull UUID tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getTenantId() {
    return tenantId;
  }


  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTenantId(@javax.annotation.Nonnull UUID tenantId) {
    this.tenantId = tenantId;
  }


  public ComparativeExperiment createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ComparativeExperiment modifiedAt(@javax.annotation.Nonnull OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * Get modifiedAt
   * @return modifiedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedAt(@javax.annotation.Nonnull OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public ComparativeExperiment referenceDatasetId(@javax.annotation.Nonnull UUID referenceDatasetId) {
    this.referenceDatasetId = referenceDatasetId;
    return this;
  }

  /**
   * Get referenceDatasetId
   * @return referenceDatasetId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REFERENCE_DATASET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getReferenceDatasetId() {
    return referenceDatasetId;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE_DATASET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReferenceDatasetId(@javax.annotation.Nonnull UUID referenceDatasetId) {
    this.referenceDatasetId = referenceDatasetId;
  }


  public ComparativeExperiment extra(@javax.annotation.Nullable Object extra) {
    this.extra = JsonNullable.<Object>of(extra);
    return this;
  }

  /**
   * Get extra
   * @return extra
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Object getExtra() {
        return extra.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXTRA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getExtra_JsonNullable() {
    return extra;
  }
  
  @JsonProperty(JSON_PROPERTY_EXTRA)
  public void setExtra_JsonNullable(JsonNullable<Object> extra) {
    this.extra = extra;
  }

  public void setExtra(@javax.annotation.Nullable Object extra) {
    this.extra = JsonNullable.<Object>of(extra);
  }


  public ComparativeExperiment experimentsInfo(@javax.annotation.Nonnull List<SimpleExperimentInfo> experimentsInfo) {
    this.experimentsInfo = experimentsInfo;
    return this;
  }

  public ComparativeExperiment addExperimentsInfoItem(SimpleExperimentInfo experimentsInfoItem) {
    if (this.experimentsInfo == null) {
      this.experimentsInfo = new ArrayList<>();
    }
    this.experimentsInfo.add(experimentsInfoItem);
    return this;
  }

  /**
   * Get experimentsInfo
   * @return experimentsInfo
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPERIMENTS_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<SimpleExperimentInfo> getExperimentsInfo() {
    return experimentsInfo;
  }


  @JsonProperty(JSON_PROPERTY_EXPERIMENTS_INFO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExperimentsInfo(@javax.annotation.Nonnull List<SimpleExperimentInfo> experimentsInfo) {
    this.experimentsInfo = experimentsInfo;
  }


  public ComparativeExperiment feedbackStats(@javax.annotation.Nullable Object feedbackStats) {
    this.feedbackStats = JsonNullable.<Object>of(feedbackStats);
    return this;
  }

  /**
   * Get feedbackStats
   * @return feedbackStats
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Object getFeedbackStats() {
        return feedbackStats.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FEEDBACK_STATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getFeedbackStats_JsonNullable() {
    return feedbackStats;
  }
  
  @JsonProperty(JSON_PROPERTY_FEEDBACK_STATS)
  public void setFeedbackStats_JsonNullable(JsonNullable<Object> feedbackStats) {
    this.feedbackStats = feedbackStats;
  }

  public void setFeedbackStats(@javax.annotation.Nullable Object feedbackStats) {
    this.feedbackStats = JsonNullable.<Object>of(feedbackStats);
  }


  /**
   * Return true if this ComparativeExperiment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComparativeExperiment comparativeExperiment = (ComparativeExperiment) o;
    return Objects.equals(this.id, comparativeExperiment.id) &&
        equalsNullable(this.name, comparativeExperiment.name) &&
        equalsNullable(this.description, comparativeExperiment.description) &&
        Objects.equals(this.tenantId, comparativeExperiment.tenantId) &&
        Objects.equals(this.createdAt, comparativeExperiment.createdAt) &&
        Objects.equals(this.modifiedAt, comparativeExperiment.modifiedAt) &&
        Objects.equals(this.referenceDatasetId, comparativeExperiment.referenceDatasetId) &&
        equalsNullable(this.extra, comparativeExperiment.extra) &&
        Objects.equals(this.experimentsInfo, comparativeExperiment.experimentsInfo) &&
        equalsNullable(this.feedbackStats, comparativeExperiment.feedbackStats);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hashCodeNullable(name), hashCodeNullable(description), tenantId, createdAt, modifiedAt, referenceDatasetId, hashCodeNullable(extra), experimentsInfo, hashCodeNullable(feedbackStats));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComparativeExperiment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    referenceDatasetId: ").append(toIndentedString(referenceDatasetId)).append("\n");
    sb.append("    extra: ").append(toIndentedString(extra)).append("\n");
    sb.append("    experimentsInfo: ").append(toIndentedString(experimentsInfo)).append("\n");
    sb.append("    feedbackStats: ").append(toIndentedString(feedbackStats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getName()))));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
    }

    // add `tenant_id` to the URL query string
    if (getTenantId() != null) {
      joiner.add(String.format("%stenant_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTenantId()))));
    }

    // add `created_at` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%screated_at%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCreatedAt()))));
    }

    // add `modified_at` to the URL query string
    if (getModifiedAt() != null) {
      joiner.add(String.format("%smodified_at%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getModifiedAt()))));
    }

    // add `reference_dataset_id` to the URL query string
    if (getReferenceDatasetId() != null) {
      joiner.add(String.format("%sreference_dataset_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getReferenceDatasetId()))));
    }

    // add `extra` to the URL query string
    if (getExtra() != null) {
      joiner.add(String.format("%sextra%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getExtra()))));
    }

    // add `experiments_info` to the URL query string
    if (getExperimentsInfo() != null) {
      for (int i = 0; i < getExperimentsInfo().size(); i++) {
        if (getExperimentsInfo().get(i) != null) {
          joiner.add(getExperimentsInfo().get(i).toUrlQueryString(String.format("%sexperiments_info%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `feedback_stats` to the URL query string
    if (getFeedbackStats() != null) {
      joiner.add(String.format("%sfeedback_stats%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFeedbackStats()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private ComparativeExperiment instance;

    public Builder() {
      this(new ComparativeExperiment());
    }

    protected Builder(ComparativeExperiment instance) {
      this.instance = instance;
    }

    public ComparativeExperiment.Builder id(UUID id) {
      this.instance.id = id;
      return this;
    }
    public ComparativeExperiment.Builder name(String name) {
      this.instance.name = JsonNullable.<String>of(name);
      return this;
    }
    public ComparativeExperiment.Builder name(JsonNullable<String> name) {
      this.instance.name = name;
      return this;
    }
    public ComparativeExperiment.Builder description(String description) {
      this.instance.description = JsonNullable.<String>of(description);
      return this;
    }
    public ComparativeExperiment.Builder description(JsonNullable<String> description) {
      this.instance.description = description;
      return this;
    }
    public ComparativeExperiment.Builder tenantId(UUID tenantId) {
      this.instance.tenantId = tenantId;
      return this;
    }
    public ComparativeExperiment.Builder createdAt(OffsetDateTime createdAt) {
      this.instance.createdAt = createdAt;
      return this;
    }
    public ComparativeExperiment.Builder modifiedAt(OffsetDateTime modifiedAt) {
      this.instance.modifiedAt = modifiedAt;
      return this;
    }
    public ComparativeExperiment.Builder referenceDatasetId(UUID referenceDatasetId) {
      this.instance.referenceDatasetId = referenceDatasetId;
      return this;
    }
    public ComparativeExperiment.Builder extra(Object extra) {
      this.instance.extra = JsonNullable.<Object>of(extra);
      return this;
    }
    public ComparativeExperiment.Builder extra(JsonNullable<Object> extra) {
      this.instance.extra = extra;
      return this;
    }
    public ComparativeExperiment.Builder experimentsInfo(List<SimpleExperimentInfo> experimentsInfo) {
      this.instance.experimentsInfo = experimentsInfo;
      return this;
    }
    public ComparativeExperiment.Builder feedbackStats(Object feedbackStats) {
      this.instance.feedbackStats = JsonNullable.<Object>of(feedbackStats);
      return this;
    }
    public ComparativeExperiment.Builder feedbackStats(JsonNullable<Object> feedbackStats) {
      this.instance.feedbackStats = feedbackStats;
      return this;
    }


    /**
    * returns a built ComparativeExperiment instance.
    *
    * The builder is not reusable.
    */
    public ComparativeExperiment build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static ComparativeExperiment.Builder builder() {
    return new ComparativeExperiment.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public ComparativeExperiment.Builder toBuilder() {
    return new ComparativeExperiment.Builder()
      .id(getId())
      .name(getName())
      .description(getDescription())
      .tenantId(getTenantId())
      .createdAt(getCreatedAt())
      .modifiedAt(getModifiedAt())
      .referenceDatasetId(getReferenceDatasetId())
      .extra(getExtra())
      .experimentsInfo(getExperimentsInfo())
      .feedbackStats(getFeedbackStats());
  }

}

