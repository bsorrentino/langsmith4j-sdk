/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * Configuration for a Runnable.
 */
@JsonPropertyOrder({
  RunnableConfig.JSON_PROPERTY_TAGS,
  RunnableConfig.JSON_PROPERTY_METADATA,
  RunnableConfig.JSON_PROPERTY_CALLBACKS,
  RunnableConfig.JSON_PROPERTY_RUN_NAME,
  RunnableConfig.JSON_PROPERTY_MAX_CONCURRENCY,
  RunnableConfig.JSON_PROPERTY_RECURSION_LIMIT,
  RunnableConfig.JSON_PROPERTY_CONFIGURABLE,
  RunnableConfig.JSON_PROPERTY_RUN_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class RunnableConfig {
  public static final String JSON_PROPERTY_TAGS = "tags";
  @javax.annotation.Nullable
  private List<String> tags = new ArrayList<>();

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nullable
  private Object metadata;

  public static final String JSON_PROPERTY_CALLBACKS = "callbacks";
  private JsonNullable<List<Object>> callbacks = JsonNullable.<List<Object>>undefined();

  public static final String JSON_PROPERTY_RUN_NAME = "run_name";
  @javax.annotation.Nullable
  private String runName;

  public static final String JSON_PROPERTY_MAX_CONCURRENCY = "max_concurrency";
  private JsonNullable<Integer> maxConcurrency = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_RECURSION_LIMIT = "recursion_limit";
  @javax.annotation.Nullable
  private Integer recursionLimit;

  public static final String JSON_PROPERTY_CONFIGURABLE = "configurable";
  @javax.annotation.Nullable
  private Object configurable;

  public static final String JSON_PROPERTY_RUN_ID = "run_id";
  private JsonNullable<UUID> runId = JsonNullable.<UUID>undefined();

  public RunnableConfig() { 
  }

  public RunnableConfig tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public RunnableConfig addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getTags() {
    return tags;
  }


  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public RunnableConfig metadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = metadata;
  }


  public RunnableConfig callbacks(@javax.annotation.Nullable List<Object> callbacks) {
    this.callbacks = JsonNullable.<List<Object>>of(callbacks);
    return this;
  }

  public RunnableConfig addCallbacksItem(Object callbacksItem) {
    if (this.callbacks == null || !this.callbacks.isPresent()) {
      this.callbacks = JsonNullable.<List<Object>>of(new ArrayList<>());
    }
    try {
      this.callbacks.get().add(callbacksItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get callbacks
   * @return callbacks
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<Object> getCallbacks() {
        return callbacks.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CALLBACKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<Object>> getCallbacks_JsonNullable() {
    return callbacks;
  }
  
  @JsonProperty(JSON_PROPERTY_CALLBACKS)
  public void setCallbacks_JsonNullable(JsonNullable<List<Object>> callbacks) {
    this.callbacks = callbacks;
  }

  public void setCallbacks(@javax.annotation.Nullable List<Object> callbacks) {
    this.callbacks = JsonNullable.<List<Object>>of(callbacks);
  }


  public RunnableConfig runName(@javax.annotation.Nullable String runName) {
    this.runName = runName;
    return this;
  }

  /**
   * Get runName
   * @return runName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RUN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRunName() {
    return runName;
  }


  @JsonProperty(JSON_PROPERTY_RUN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRunName(@javax.annotation.Nullable String runName) {
    this.runName = runName;
  }


  public RunnableConfig maxConcurrency(@javax.annotation.Nullable Integer maxConcurrency) {
    this.maxConcurrency = JsonNullable.<Integer>of(maxConcurrency);
    return this;
  }

  /**
   * Get maxConcurrency
   * @return maxConcurrency
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Integer getMaxConcurrency() {
        return maxConcurrency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_CONCURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxConcurrency_JsonNullable() {
    return maxConcurrency;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_CONCURRENCY)
  public void setMaxConcurrency_JsonNullable(JsonNullable<Integer> maxConcurrency) {
    this.maxConcurrency = maxConcurrency;
  }

  public void setMaxConcurrency(@javax.annotation.Nullable Integer maxConcurrency) {
    this.maxConcurrency = JsonNullable.<Integer>of(maxConcurrency);
  }


  public RunnableConfig recursionLimit(@javax.annotation.Nullable Integer recursionLimit) {
    this.recursionLimit = recursionLimit;
    return this;
  }

  /**
   * Get recursionLimit
   * @return recursionLimit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECURSION_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getRecursionLimit() {
    return recursionLimit;
  }


  @JsonProperty(JSON_PROPERTY_RECURSION_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecursionLimit(@javax.annotation.Nullable Integer recursionLimit) {
    this.recursionLimit = recursionLimit;
  }


  public RunnableConfig configurable(@javax.annotation.Nullable Object configurable) {
    this.configurable = configurable;
    return this;
  }

  /**
   * Get configurable
   * @return configurable
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONFIGURABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getConfigurable() {
    return configurable;
  }


  @JsonProperty(JSON_PROPERTY_CONFIGURABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigurable(@javax.annotation.Nullable Object configurable) {
    this.configurable = configurable;
  }


  public RunnableConfig runId(@javax.annotation.Nullable UUID runId) {
    this.runId = JsonNullable.<UUID>of(runId);
    return this;
  }

  /**
   * Get runId
   * @return runId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public UUID getRunId() {
        return runId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RUN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getRunId_JsonNullable() {
    return runId;
  }
  
  @JsonProperty(JSON_PROPERTY_RUN_ID)
  public void setRunId_JsonNullable(JsonNullable<UUID> runId) {
    this.runId = runId;
  }

  public void setRunId(@javax.annotation.Nullable UUID runId) {
    this.runId = JsonNullable.<UUID>of(runId);
  }


  /**
   * Return true if this RunnableConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunnableConfig runnableConfig = (RunnableConfig) o;
    return Objects.equals(this.tags, runnableConfig.tags) &&
        Objects.equals(this.metadata, runnableConfig.metadata) &&
        equalsNullable(this.callbacks, runnableConfig.callbacks) &&
        Objects.equals(this.runName, runnableConfig.runName) &&
        equalsNullable(this.maxConcurrency, runnableConfig.maxConcurrency) &&
        Objects.equals(this.recursionLimit, runnableConfig.recursionLimit) &&
        Objects.equals(this.configurable, runnableConfig.configurable) &&
        equalsNullable(this.runId, runnableConfig.runId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, metadata, hashCodeNullable(callbacks), runName, hashCodeNullable(maxConcurrency), recursionLimit, configurable, hashCodeNullable(runId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunnableConfig {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    callbacks: ").append(toIndentedString(callbacks)).append("\n");
    sb.append("    runName: ").append(toIndentedString(runName)).append("\n");
    sb.append("    maxConcurrency: ").append(toIndentedString(maxConcurrency)).append("\n");
    sb.append("    recursionLimit: ").append(toIndentedString(recursionLimit)).append("\n");
    sb.append("    configurable: ").append(toIndentedString(configurable)).append("\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `tags` to the URL query string
    if (getTags() != null) {
      for (int i = 0; i < getTags().size(); i++) {
        joiner.add(String.format("%stags%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getTags().get(i)))));
      }
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(String.format("%smetadata%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMetadata()))));
    }

    // add `callbacks` to the URL query string
    if (getCallbacks() != null) {
      for (int i = 0; i < getCallbacks().size(); i++) {
        joiner.add(String.format("%scallbacks%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getCallbacks().get(i)))));
      }
    }

    // add `run_name` to the URL query string
    if (getRunName() != null) {
      joiner.add(String.format("%srun_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRunName()))));
    }

    // add `max_concurrency` to the URL query string
    if (getMaxConcurrency() != null) {
      joiner.add(String.format("%smax_concurrency%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMaxConcurrency()))));
    }

    // add `recursion_limit` to the URL query string
    if (getRecursionLimit() != null) {
      joiner.add(String.format("%srecursion_limit%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRecursionLimit()))));
    }

    // add `configurable` to the URL query string
    if (getConfigurable() != null) {
      joiner.add(String.format("%sconfigurable%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getConfigurable()))));
    }

    // add `run_id` to the URL query string
    if (getRunId() != null) {
      joiner.add(String.format("%srun_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRunId()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private RunnableConfig instance;

    public Builder() {
      this(new RunnableConfig());
    }

    protected Builder(RunnableConfig instance) {
      this.instance = instance;
    }

    public RunnableConfig.Builder tags(List<String> tags) {
      this.instance.tags = tags;
      return this;
    }
    public RunnableConfig.Builder metadata(Object metadata) {
      this.instance.metadata = metadata;
      return this;
    }
    public RunnableConfig.Builder callbacks(List<Object> callbacks) {
      this.instance.callbacks = JsonNullable.<List<Object>>of(callbacks);
      return this;
    }
    public RunnableConfig.Builder callbacks(JsonNullable<List<Object>> callbacks) {
      this.instance.callbacks = callbacks;
      return this;
    }
    public RunnableConfig.Builder runName(String runName) {
      this.instance.runName = runName;
      return this;
    }
    public RunnableConfig.Builder maxConcurrency(Integer maxConcurrency) {
      this.instance.maxConcurrency = JsonNullable.<Integer>of(maxConcurrency);
      return this;
    }
    public RunnableConfig.Builder maxConcurrency(JsonNullable<Integer> maxConcurrency) {
      this.instance.maxConcurrency = maxConcurrency;
      return this;
    }
    public RunnableConfig.Builder recursionLimit(Integer recursionLimit) {
      this.instance.recursionLimit = recursionLimit;
      return this;
    }
    public RunnableConfig.Builder configurable(Object configurable) {
      this.instance.configurable = configurable;
      return this;
    }
    public RunnableConfig.Builder runId(UUID runId) {
      this.instance.runId = JsonNullable.<UUID>of(runId);
      return this;
    }
    public RunnableConfig.Builder runId(JsonNullable<UUID> runId) {
      this.instance.runId = runId;
      return this;
    }


    /**
    * returns a built RunnableConfig instance.
    *
    * The builder is not reusable.
    */
    public RunnableConfig build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static RunnableConfig.Builder builder() {
    return new RunnableConfig.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public RunnableConfig.Builder toBuilder() {
    return new RunnableConfig.Builder()
      .tags(getTags())
      .metadata(getMetadata())
      .callbacks(getCallbacks())
      .runName(getRunName())
      .maxConcurrency(getMaxConcurrency())
      .recursionLimit(getRecursionLimit())
      .configurable(getConfigurable())
      .runId(getRunId());
  }

}

