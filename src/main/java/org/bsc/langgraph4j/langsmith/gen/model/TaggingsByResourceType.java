/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.bsc.langgraph4j.langsmith.gen.model.Resource;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * TaggingsByResourceType
 */
@JsonPropertyOrder({
  TaggingsByResourceType.JSON_PROPERTY_PROMPTS,
  TaggingsByResourceType.JSON_PROPERTY_PROJECTS,
  TaggingsByResourceType.JSON_PROPERTY_QUEUES,
  TaggingsByResourceType.JSON_PROPERTY_DEPLOYMENTS,
  TaggingsByResourceType.JSON_PROPERTY_EXPERIMENTS,
  TaggingsByResourceType.JSON_PROPERTY_DATASETS,
  TaggingsByResourceType.JSON_PROPERTY_DASHBOARDS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class TaggingsByResourceType {
  public static final String JSON_PROPERTY_PROMPTS = "prompts";
  @javax.annotation.Nullable
  private List<Resource> prompts = new ArrayList<>();

  public static final String JSON_PROPERTY_PROJECTS = "projects";
  @javax.annotation.Nullable
  private List<Resource> projects = new ArrayList<>();

  public static final String JSON_PROPERTY_QUEUES = "queues";
  @javax.annotation.Nullable
  private List<Resource> queues = new ArrayList<>();

  public static final String JSON_PROPERTY_DEPLOYMENTS = "deployments";
  @javax.annotation.Nullable
  private List<Resource> deployments = new ArrayList<>();

  public static final String JSON_PROPERTY_EXPERIMENTS = "experiments";
  @javax.annotation.Nullable
  private List<Resource> experiments = new ArrayList<>();

  public static final String JSON_PROPERTY_DATASETS = "datasets";
  @javax.annotation.Nullable
  private List<Resource> datasets = new ArrayList<>();

  public static final String JSON_PROPERTY_DASHBOARDS = "dashboards";
  @javax.annotation.Nullable
  private List<Resource> dashboards = new ArrayList<>();

  public TaggingsByResourceType() { 
  }

  public TaggingsByResourceType prompts(@javax.annotation.Nullable List<Resource> prompts) {
    this.prompts = prompts;
    return this;
  }

  public TaggingsByResourceType addPromptsItem(Resource promptsItem) {
    if (this.prompts == null) {
      this.prompts = new ArrayList<>();
    }
    this.prompts.add(promptsItem);
    return this;
  }

  /**
   * Get prompts
   * @return prompts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Resource> getPrompts() {
    return prompts;
  }


  @JsonProperty(JSON_PROPERTY_PROMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrompts(@javax.annotation.Nullable List<Resource> prompts) {
    this.prompts = prompts;
  }


  public TaggingsByResourceType projects(@javax.annotation.Nullable List<Resource> projects) {
    this.projects = projects;
    return this;
  }

  public TaggingsByResourceType addProjectsItem(Resource projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<>();
    }
    this.projects.add(projectsItem);
    return this;
  }

  /**
   * Get projects
   * @return projects
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Resource> getProjects() {
    return projects;
  }


  @JsonProperty(JSON_PROPERTY_PROJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProjects(@javax.annotation.Nullable List<Resource> projects) {
    this.projects = projects;
  }


  public TaggingsByResourceType queues(@javax.annotation.Nullable List<Resource> queues) {
    this.queues = queues;
    return this;
  }

  public TaggingsByResourceType addQueuesItem(Resource queuesItem) {
    if (this.queues == null) {
      this.queues = new ArrayList<>();
    }
    this.queues.add(queuesItem);
    return this;
  }

  /**
   * Get queues
   * @return queues
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUEUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Resource> getQueues() {
    return queues;
  }


  @JsonProperty(JSON_PROPERTY_QUEUES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueues(@javax.annotation.Nullable List<Resource> queues) {
    this.queues = queues;
  }


  public TaggingsByResourceType deployments(@javax.annotation.Nullable List<Resource> deployments) {
    this.deployments = deployments;
    return this;
  }

  public TaggingsByResourceType addDeploymentsItem(Resource deploymentsItem) {
    if (this.deployments == null) {
      this.deployments = new ArrayList<>();
    }
    this.deployments.add(deploymentsItem);
    return this;
  }

  /**
   * Get deployments
   * @return deployments
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPLOYMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Resource> getDeployments() {
    return deployments;
  }


  @JsonProperty(JSON_PROPERTY_DEPLOYMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeployments(@javax.annotation.Nullable List<Resource> deployments) {
    this.deployments = deployments;
  }


  public TaggingsByResourceType experiments(@javax.annotation.Nullable List<Resource> experiments) {
    this.experiments = experiments;
    return this;
  }

  public TaggingsByResourceType addExperimentsItem(Resource experimentsItem) {
    if (this.experiments == null) {
      this.experiments = new ArrayList<>();
    }
    this.experiments.add(experimentsItem);
    return this;
  }

  /**
   * Get experiments
   * @return experiments
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPERIMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Resource> getExperiments() {
    return experiments;
  }


  @JsonProperty(JSON_PROPERTY_EXPERIMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExperiments(@javax.annotation.Nullable List<Resource> experiments) {
    this.experiments = experiments;
  }


  public TaggingsByResourceType datasets(@javax.annotation.Nullable List<Resource> datasets) {
    this.datasets = datasets;
    return this;
  }

  public TaggingsByResourceType addDatasetsItem(Resource datasetsItem) {
    if (this.datasets == null) {
      this.datasets = new ArrayList<>();
    }
    this.datasets.add(datasetsItem);
    return this;
  }

  /**
   * Get datasets
   * @return datasets
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATASETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Resource> getDatasets() {
    return datasets;
  }


  @JsonProperty(JSON_PROPERTY_DATASETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDatasets(@javax.annotation.Nullable List<Resource> datasets) {
    this.datasets = datasets;
  }


  public TaggingsByResourceType dashboards(@javax.annotation.Nullable List<Resource> dashboards) {
    this.dashboards = dashboards;
    return this;
  }

  public TaggingsByResourceType addDashboardsItem(Resource dashboardsItem) {
    if (this.dashboards == null) {
      this.dashboards = new ArrayList<>();
    }
    this.dashboards.add(dashboardsItem);
    return this;
  }

  /**
   * Get dashboards
   * @return dashboards
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DASHBOARDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Resource> getDashboards() {
    return dashboards;
  }


  @JsonProperty(JSON_PROPERTY_DASHBOARDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDashboards(@javax.annotation.Nullable List<Resource> dashboards) {
    this.dashboards = dashboards;
  }


  /**
   * Return true if this TaggingsByResourceType object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaggingsByResourceType taggingsByResourceType = (TaggingsByResourceType) o;
    return Objects.equals(this.prompts, taggingsByResourceType.prompts) &&
        Objects.equals(this.projects, taggingsByResourceType.projects) &&
        Objects.equals(this.queues, taggingsByResourceType.queues) &&
        Objects.equals(this.deployments, taggingsByResourceType.deployments) &&
        Objects.equals(this.experiments, taggingsByResourceType.experiments) &&
        Objects.equals(this.datasets, taggingsByResourceType.datasets) &&
        Objects.equals(this.dashboards, taggingsByResourceType.dashboards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prompts, projects, queues, deployments, experiments, datasets, dashboards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaggingsByResourceType {\n");
    sb.append("    prompts: ").append(toIndentedString(prompts)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    queues: ").append(toIndentedString(queues)).append("\n");
    sb.append("    deployments: ").append(toIndentedString(deployments)).append("\n");
    sb.append("    experiments: ").append(toIndentedString(experiments)).append("\n");
    sb.append("    datasets: ").append(toIndentedString(datasets)).append("\n");
    sb.append("    dashboards: ").append(toIndentedString(dashboards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `prompts` to the URL query string
    if (getPrompts() != null) {
      for (int i = 0; i < getPrompts().size(); i++) {
        if (getPrompts().get(i) != null) {
          joiner.add(getPrompts().get(i).toUrlQueryString(String.format("%sprompts%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `projects` to the URL query string
    if (getProjects() != null) {
      for (int i = 0; i < getProjects().size(); i++) {
        if (getProjects().get(i) != null) {
          joiner.add(getProjects().get(i).toUrlQueryString(String.format("%sprojects%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `queues` to the URL query string
    if (getQueues() != null) {
      for (int i = 0; i < getQueues().size(); i++) {
        if (getQueues().get(i) != null) {
          joiner.add(getQueues().get(i).toUrlQueryString(String.format("%squeues%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `deployments` to the URL query string
    if (getDeployments() != null) {
      for (int i = 0; i < getDeployments().size(); i++) {
        if (getDeployments().get(i) != null) {
          joiner.add(getDeployments().get(i).toUrlQueryString(String.format("%sdeployments%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `experiments` to the URL query string
    if (getExperiments() != null) {
      for (int i = 0; i < getExperiments().size(); i++) {
        if (getExperiments().get(i) != null) {
          joiner.add(getExperiments().get(i).toUrlQueryString(String.format("%sexperiments%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `datasets` to the URL query string
    if (getDatasets() != null) {
      for (int i = 0; i < getDatasets().size(); i++) {
        if (getDatasets().get(i) != null) {
          joiner.add(getDatasets().get(i).toUrlQueryString(String.format("%sdatasets%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `dashboards` to the URL query string
    if (getDashboards() != null) {
      for (int i = 0; i < getDashboards().size(); i++) {
        if (getDashboards().get(i) != null) {
          joiner.add(getDashboards().get(i).toUrlQueryString(String.format("%sdashboards%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

    public static class Builder {

    private TaggingsByResourceType instance;

    public Builder() {
      this(new TaggingsByResourceType());
    }

    protected Builder(TaggingsByResourceType instance) {
      this.instance = instance;
    }

    public TaggingsByResourceType.Builder prompts(List<Resource> prompts) {
      this.instance.prompts = prompts;
      return this;
    }
    public TaggingsByResourceType.Builder projects(List<Resource> projects) {
      this.instance.projects = projects;
      return this;
    }
    public TaggingsByResourceType.Builder queues(List<Resource> queues) {
      this.instance.queues = queues;
      return this;
    }
    public TaggingsByResourceType.Builder deployments(List<Resource> deployments) {
      this.instance.deployments = deployments;
      return this;
    }
    public TaggingsByResourceType.Builder experiments(List<Resource> experiments) {
      this.instance.experiments = experiments;
      return this;
    }
    public TaggingsByResourceType.Builder datasets(List<Resource> datasets) {
      this.instance.datasets = datasets;
      return this;
    }
    public TaggingsByResourceType.Builder dashboards(List<Resource> dashboards) {
      this.instance.dashboards = dashboards;
      return this;
    }


    /**
    * returns a built TaggingsByResourceType instance.
    *
    * The builder is not reusable.
    */
    public TaggingsByResourceType build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static TaggingsByResourceType.Builder builder() {
    return new TaggingsByResourceType.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public TaggingsByResourceType.Builder toBuilder() {
    return new TaggingsByResourceType.Builder()
      .prompts(getPrompts())
      .projects(getProjects())
      .queues(getQueues())
      .deployments(getDeployments())
      .experiments(getExperiments())
      .datasets(getDatasets())
      .dashboards(getDashboards());
  }

}

