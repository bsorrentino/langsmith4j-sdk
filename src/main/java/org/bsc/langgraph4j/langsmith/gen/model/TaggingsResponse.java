/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.UUID;
import org.bsc.langgraph4j.langsmith.gen.model.TaggingsByResourceType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * TaggingsResponse
 */
@JsonPropertyOrder({
  TaggingsResponse.JSON_PROPERTY_TAG_KEY,
  TaggingsResponse.JSON_PROPERTY_TAG_KEY_ID,
  TaggingsResponse.JSON_PROPERTY_TAG_VALUE,
  TaggingsResponse.JSON_PROPERTY_TAG_VALUE_ID,
  TaggingsResponse.JSON_PROPERTY_RESOURCES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class TaggingsResponse {
  public static final String JSON_PROPERTY_TAG_KEY = "tag_key";
  @javax.annotation.Nonnull
  private String tagKey;

  public static final String JSON_PROPERTY_TAG_KEY_ID = "tag_key_id";
  @javax.annotation.Nonnull
  private UUID tagKeyId;

  public static final String JSON_PROPERTY_TAG_VALUE = "tag_value";
  @javax.annotation.Nonnull
  private String tagValue;

  public static final String JSON_PROPERTY_TAG_VALUE_ID = "tag_value_id";
  @javax.annotation.Nonnull
  private UUID tagValueId;

  public static final String JSON_PROPERTY_RESOURCES = "resources";
  @javax.annotation.Nonnull
  private TaggingsByResourceType resources;

  public TaggingsResponse() { 
  }

  public TaggingsResponse tagKey(@javax.annotation.Nonnull String tagKey) {
    this.tagKey = tagKey;
    return this;
  }

  /**
   * Get tagKey
   * @return tagKey
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAG_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTagKey() {
    return tagKey;
  }


  @JsonProperty(JSON_PROPERTY_TAG_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTagKey(@javax.annotation.Nonnull String tagKey) {
    this.tagKey = tagKey;
  }


  public TaggingsResponse tagKeyId(@javax.annotation.Nonnull UUID tagKeyId) {
    this.tagKeyId = tagKeyId;
    return this;
  }

  /**
   * Get tagKeyId
   * @return tagKeyId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAG_KEY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getTagKeyId() {
    return tagKeyId;
  }


  @JsonProperty(JSON_PROPERTY_TAG_KEY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTagKeyId(@javax.annotation.Nonnull UUID tagKeyId) {
    this.tagKeyId = tagKeyId;
  }


  public TaggingsResponse tagValue(@javax.annotation.Nonnull String tagValue) {
    this.tagValue = tagValue;
    return this;
  }

  /**
   * Get tagValue
   * @return tagValue
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAG_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTagValue() {
    return tagValue;
  }


  @JsonProperty(JSON_PROPERTY_TAG_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTagValue(@javax.annotation.Nonnull String tagValue) {
    this.tagValue = tagValue;
  }


  public TaggingsResponse tagValueId(@javax.annotation.Nonnull UUID tagValueId) {
    this.tagValueId = tagValueId;
    return this;
  }

  /**
   * Get tagValueId
   * @return tagValueId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAG_VALUE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getTagValueId() {
    return tagValueId;
  }


  @JsonProperty(JSON_PROPERTY_TAG_VALUE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTagValueId(@javax.annotation.Nonnull UUID tagValueId) {
    this.tagValueId = tagValueId;
  }


  public TaggingsResponse resources(@javax.annotation.Nonnull TaggingsByResourceType resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public TaggingsByResourceType getResources() {
    return resources;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResources(@javax.annotation.Nonnull TaggingsByResourceType resources) {
    this.resources = resources;
  }


  /**
   * Return true if this TaggingsResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaggingsResponse taggingsResponse = (TaggingsResponse) o;
    return Objects.equals(this.tagKey, taggingsResponse.tagKey) &&
        Objects.equals(this.tagKeyId, taggingsResponse.tagKeyId) &&
        Objects.equals(this.tagValue, taggingsResponse.tagValue) &&
        Objects.equals(this.tagValueId, taggingsResponse.tagValueId) &&
        Objects.equals(this.resources, taggingsResponse.resources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tagKey, tagKeyId, tagValue, tagValueId, resources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaggingsResponse {\n");
    sb.append("    tagKey: ").append(toIndentedString(tagKey)).append("\n");
    sb.append("    tagKeyId: ").append(toIndentedString(tagKeyId)).append("\n");
    sb.append("    tagValue: ").append(toIndentedString(tagValue)).append("\n");
    sb.append("    tagValueId: ").append(toIndentedString(tagValueId)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `tag_key` to the URL query string
    if (getTagKey() != null) {
      joiner.add(String.format("%stag_key%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTagKey()))));
    }

    // add `tag_key_id` to the URL query string
    if (getTagKeyId() != null) {
      joiner.add(String.format("%stag_key_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTagKeyId()))));
    }

    // add `tag_value` to the URL query string
    if (getTagValue() != null) {
      joiner.add(String.format("%stag_value%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTagValue()))));
    }

    // add `tag_value_id` to the URL query string
    if (getTagValueId() != null) {
      joiner.add(String.format("%stag_value_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTagValueId()))));
    }

    // add `resources` to the URL query string
    if (getResources() != null) {
      joiner.add(getResources().toUrlQueryString(prefix + "resources" + suffix));
    }

    return joiner.toString();
  }

    public static class Builder {

    private TaggingsResponse instance;

    public Builder() {
      this(new TaggingsResponse());
    }

    protected Builder(TaggingsResponse instance) {
      this.instance = instance;
    }

    public TaggingsResponse.Builder tagKey(String tagKey) {
      this.instance.tagKey = tagKey;
      return this;
    }
    public TaggingsResponse.Builder tagKeyId(UUID tagKeyId) {
      this.instance.tagKeyId = tagKeyId;
      return this;
    }
    public TaggingsResponse.Builder tagValue(String tagValue) {
      this.instance.tagValue = tagValue;
      return this;
    }
    public TaggingsResponse.Builder tagValueId(UUID tagValueId) {
      this.instance.tagValueId = tagValueId;
      return this;
    }
    public TaggingsResponse.Builder resources(TaggingsByResourceType resources) {
      this.instance.resources = resources;
      return this;
    }


    /**
    * returns a built TaggingsResponse instance.
    *
    * The builder is not reusable.
    */
    public TaggingsResponse build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static TaggingsResponse.Builder builder() {
    return new TaggingsResponse.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public TaggingsResponse.Builder toBuilder() {
    return new TaggingsResponse.Builder()
      .tagKey(getTagKey())
      .tagKeyId(getTagKeyId())
      .tagValue(getTagValue())
      .tagValueId(getTagValueId())
      .resources(getResources());
  }

}

