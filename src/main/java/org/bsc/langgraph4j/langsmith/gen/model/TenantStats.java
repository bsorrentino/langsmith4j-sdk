/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * Stats for a tenant.
 */
@JsonPropertyOrder({
  TenantStats.JSON_PROPERTY_TENANT_ID,
  TenantStats.JSON_PROPERTY_DATASET_COUNT,
  TenantStats.JSON_PROPERTY_TRACER_SESSION_COUNT,
  TenantStats.JSON_PROPERTY_REPO_COUNT,
  TenantStats.JSON_PROPERTY_ANNOTATION_QUEUE_COUNT,
  TenantStats.JSON_PROPERTY_DEPLOYMENT_COUNT,
  TenantStats.JSON_PROPERTY_DASHBOARDS_COUNT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class TenantStats {
  public static final String JSON_PROPERTY_TENANT_ID = "tenant_id";
  @javax.annotation.Nonnull
  private UUID tenantId;

  public static final String JSON_PROPERTY_DATASET_COUNT = "dataset_count";
  @javax.annotation.Nonnull
  private Integer datasetCount;

  public static final String JSON_PROPERTY_TRACER_SESSION_COUNT = "tracer_session_count";
  @javax.annotation.Nonnull
  private Integer tracerSessionCount;

  public static final String JSON_PROPERTY_REPO_COUNT = "repo_count";
  @javax.annotation.Nonnull
  private Integer repoCount;

  public static final String JSON_PROPERTY_ANNOTATION_QUEUE_COUNT = "annotation_queue_count";
  @javax.annotation.Nonnull
  private Integer annotationQueueCount;

  public static final String JSON_PROPERTY_DEPLOYMENT_COUNT = "deployment_count";
  @javax.annotation.Nonnull
  private Integer deploymentCount;

  public static final String JSON_PROPERTY_DASHBOARDS_COUNT = "dashboards_count";
  @javax.annotation.Nonnull
  private Integer dashboardsCount;

  public TenantStats() { 
  }

  public TenantStats tenantId(@javax.annotation.Nonnull UUID tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getTenantId() {
    return tenantId;
  }


  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTenantId(@javax.annotation.Nonnull UUID tenantId) {
    this.tenantId = tenantId;
  }


  public TenantStats datasetCount(@javax.annotation.Nonnull Integer datasetCount) {
    this.datasetCount = datasetCount;
    return this;
  }

  /**
   * Get datasetCount
   * @return datasetCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATASET_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getDatasetCount() {
    return datasetCount;
  }


  @JsonProperty(JSON_PROPERTY_DATASET_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDatasetCount(@javax.annotation.Nonnull Integer datasetCount) {
    this.datasetCount = datasetCount;
  }


  public TenantStats tracerSessionCount(@javax.annotation.Nonnull Integer tracerSessionCount) {
    this.tracerSessionCount = tracerSessionCount;
    return this;
  }

  /**
   * Get tracerSessionCount
   * @return tracerSessionCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRACER_SESSION_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getTracerSessionCount() {
    return tracerSessionCount;
  }


  @JsonProperty(JSON_PROPERTY_TRACER_SESSION_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTracerSessionCount(@javax.annotation.Nonnull Integer tracerSessionCount) {
    this.tracerSessionCount = tracerSessionCount;
  }


  public TenantStats repoCount(@javax.annotation.Nonnull Integer repoCount) {
    this.repoCount = repoCount;
    return this;
  }

  /**
   * Get repoCount
   * @return repoCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REPO_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getRepoCount() {
    return repoCount;
  }


  @JsonProperty(JSON_PROPERTY_REPO_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRepoCount(@javax.annotation.Nonnull Integer repoCount) {
    this.repoCount = repoCount;
  }


  public TenantStats annotationQueueCount(@javax.annotation.Nonnull Integer annotationQueueCount) {
    this.annotationQueueCount = annotationQueueCount;
    return this;
  }

  /**
   * Get annotationQueueCount
   * @return annotationQueueCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ANNOTATION_QUEUE_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getAnnotationQueueCount() {
    return annotationQueueCount;
  }


  @JsonProperty(JSON_PROPERTY_ANNOTATION_QUEUE_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAnnotationQueueCount(@javax.annotation.Nonnull Integer annotationQueueCount) {
    this.annotationQueueCount = annotationQueueCount;
  }


  public TenantStats deploymentCount(@javax.annotation.Nonnull Integer deploymentCount) {
    this.deploymentCount = deploymentCount;
    return this;
  }

  /**
   * Get deploymentCount
   * @return deploymentCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEPLOYMENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getDeploymentCount() {
    return deploymentCount;
  }


  @JsonProperty(JSON_PROPERTY_DEPLOYMENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeploymentCount(@javax.annotation.Nonnull Integer deploymentCount) {
    this.deploymentCount = deploymentCount;
  }


  public TenantStats dashboardsCount(@javax.annotation.Nonnull Integer dashboardsCount) {
    this.dashboardsCount = dashboardsCount;
    return this;
  }

  /**
   * Get dashboardsCount
   * @return dashboardsCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DASHBOARDS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getDashboardsCount() {
    return dashboardsCount;
  }


  @JsonProperty(JSON_PROPERTY_DASHBOARDS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDashboardsCount(@javax.annotation.Nonnull Integer dashboardsCount) {
    this.dashboardsCount = dashboardsCount;
  }


  /**
   * Return true if this TenantStats object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TenantStats tenantStats = (TenantStats) o;
    return Objects.equals(this.tenantId, tenantStats.tenantId) &&
        Objects.equals(this.datasetCount, tenantStats.datasetCount) &&
        Objects.equals(this.tracerSessionCount, tenantStats.tracerSessionCount) &&
        Objects.equals(this.repoCount, tenantStats.repoCount) &&
        Objects.equals(this.annotationQueueCount, tenantStats.annotationQueueCount) &&
        Objects.equals(this.deploymentCount, tenantStats.deploymentCount) &&
        Objects.equals(this.dashboardsCount, tenantStats.dashboardsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenantId, datasetCount, tracerSessionCount, repoCount, annotationQueueCount, deploymentCount, dashboardsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TenantStats {\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    datasetCount: ").append(toIndentedString(datasetCount)).append("\n");
    sb.append("    tracerSessionCount: ").append(toIndentedString(tracerSessionCount)).append("\n");
    sb.append("    repoCount: ").append(toIndentedString(repoCount)).append("\n");
    sb.append("    annotationQueueCount: ").append(toIndentedString(annotationQueueCount)).append("\n");
    sb.append("    deploymentCount: ").append(toIndentedString(deploymentCount)).append("\n");
    sb.append("    dashboardsCount: ").append(toIndentedString(dashboardsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `tenant_id` to the URL query string
    if (getTenantId() != null) {
      joiner.add(String.format("%stenant_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTenantId()))));
    }

    // add `dataset_count` to the URL query string
    if (getDatasetCount() != null) {
      joiner.add(String.format("%sdataset_count%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDatasetCount()))));
    }

    // add `tracer_session_count` to the URL query string
    if (getTracerSessionCount() != null) {
      joiner.add(String.format("%stracer_session_count%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTracerSessionCount()))));
    }

    // add `repo_count` to the URL query string
    if (getRepoCount() != null) {
      joiner.add(String.format("%srepo_count%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRepoCount()))));
    }

    // add `annotation_queue_count` to the URL query string
    if (getAnnotationQueueCount() != null) {
      joiner.add(String.format("%sannotation_queue_count%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAnnotationQueueCount()))));
    }

    // add `deployment_count` to the URL query string
    if (getDeploymentCount() != null) {
      joiner.add(String.format("%sdeployment_count%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDeploymentCount()))));
    }

    // add `dashboards_count` to the URL query string
    if (getDashboardsCount() != null) {
      joiner.add(String.format("%sdashboards_count%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDashboardsCount()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private TenantStats instance;

    public Builder() {
      this(new TenantStats());
    }

    protected Builder(TenantStats instance) {
      this.instance = instance;
    }

    public TenantStats.Builder tenantId(UUID tenantId) {
      this.instance.tenantId = tenantId;
      return this;
    }
    public TenantStats.Builder datasetCount(Integer datasetCount) {
      this.instance.datasetCount = datasetCount;
      return this;
    }
    public TenantStats.Builder tracerSessionCount(Integer tracerSessionCount) {
      this.instance.tracerSessionCount = tracerSessionCount;
      return this;
    }
    public TenantStats.Builder repoCount(Integer repoCount) {
      this.instance.repoCount = repoCount;
      return this;
    }
    public TenantStats.Builder annotationQueueCount(Integer annotationQueueCount) {
      this.instance.annotationQueueCount = annotationQueueCount;
      return this;
    }
    public TenantStats.Builder deploymentCount(Integer deploymentCount) {
      this.instance.deploymentCount = deploymentCount;
      return this;
    }
    public TenantStats.Builder dashboardsCount(Integer dashboardsCount) {
      this.instance.dashboardsCount = dashboardsCount;
      return this;
    }


    /**
    * returns a built TenantStats instance.
    *
    * The builder is not reusable.
    */
    public TenantStats build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static TenantStats.Builder builder() {
    return new TenantStats.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public TenantStats.Builder toBuilder() {
    return new TenantStats.Builder()
      .tenantId(getTenantId())
      .datasetCount(getDatasetCount())
      .tracerSessionCount(getTracerSessionCount())
      .repoCount(getRepoCount())
      .annotationQueueCount(getAnnotationQueueCount())
      .deploymentCount(getDeploymentCount())
      .dashboardsCount(getDashboardsCount());
  }

}

