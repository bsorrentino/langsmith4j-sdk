/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * CreateEventRequest
 */
@JsonPropertyOrder({
  CreateEventRequest.JSON_PROPERTY_EVENT_TYPE,
  CreateEventRequest.JSON_PROPERTY_OWNER,
  CreateEventRequest.JSON_PROPERTY_REPO,
  CreateEventRequest.JSON_PROPERTY_COMMIT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class CreateEventRequest {
  /**
   * Gets or Sets eventType
   */
  public enum EventTypeEnum {
    PLAYGROUND_VIEW(String.valueOf("playground-view")),
    
    PLAYGROUND_RUN(String.valueOf("playground-run"));

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVENT_TYPE = "event_type";
  @javax.annotation.Nonnull
  private EventTypeEnum eventType;

  public static final String JSON_PROPERTY_OWNER = "owner";
  @javax.annotation.Nonnull
  private String owner;

  public static final String JSON_PROPERTY_REPO = "repo";
  @javax.annotation.Nonnull
  private String repo;

  public static final String JSON_PROPERTY_COMMIT = "commit";
  private JsonNullable<String> commit = JsonNullable.<String>undefined();

  public CreateEventRequest() { 
  }

  public CreateEventRequest eventType(@javax.annotation.Nonnull EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public EventTypeEnum getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventType(@javax.annotation.Nonnull EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public CreateEventRequest owner(@javax.annotation.Nonnull String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getOwner() {
    return owner;
  }


  @JsonProperty(JSON_PROPERTY_OWNER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwner(@javax.annotation.Nonnull String owner) {
    this.owner = owner;
  }


  public CreateEventRequest repo(@javax.annotation.Nonnull String repo) {
    this.repo = repo;
    return this;
  }

  /**
   * Get repo
   * @return repo
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REPO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getRepo() {
    return repo;
  }


  @JsonProperty(JSON_PROPERTY_REPO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRepo(@javax.annotation.Nonnull String repo) {
    this.repo = repo;
  }


  public CreateEventRequest commit(@javax.annotation.Nullable String commit) {
    this.commit = JsonNullable.<String>of(commit);
    return this;
  }

  /**
   * Get commit
   * @return commit
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getCommit() {
        return commit.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCommit_JsonNullable() {
    return commit;
  }
  
  @JsonProperty(JSON_PROPERTY_COMMIT)
  public void setCommit_JsonNullable(JsonNullable<String> commit) {
    this.commit = commit;
  }

  public void setCommit(@javax.annotation.Nullable String commit) {
    this.commit = JsonNullable.<String>of(commit);
  }


  /**
   * Return true if this CreateEventRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEventRequest createEventRequest = (CreateEventRequest) o;
    return Objects.equals(this.eventType, createEventRequest.eventType) &&
        Objects.equals(this.owner, createEventRequest.owner) &&
        Objects.equals(this.repo, createEventRequest.repo) &&
        equalsNullable(this.commit, createEventRequest.commit);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, owner, repo, hashCodeNullable(commit));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEventRequest {\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `event_type` to the URL query string
    if (getEventType() != null) {
      joiner.add(String.format("%sevent_type%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEventType()))));
    }

    // add `owner` to the URL query string
    if (getOwner() != null) {
      joiner.add(String.format("%sowner%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getOwner()))));
    }

    // add `repo` to the URL query string
    if (getRepo() != null) {
      joiner.add(String.format("%srepo%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRepo()))));
    }

    // add `commit` to the URL query string
    if (getCommit() != null) {
      joiner.add(String.format("%scommit%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCommit()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private CreateEventRequest instance;

    public Builder() {
      this(new CreateEventRequest());
    }

    protected Builder(CreateEventRequest instance) {
      this.instance = instance;
    }

    public CreateEventRequest.Builder eventType(EventTypeEnum eventType) {
      this.instance.eventType = eventType;
      return this;
    }
    public CreateEventRequest.Builder owner(String owner) {
      this.instance.owner = owner;
      return this;
    }
    public CreateEventRequest.Builder repo(String repo) {
      this.instance.repo = repo;
      return this;
    }
    public CreateEventRequest.Builder commit(String commit) {
      this.instance.commit = JsonNullable.<String>of(commit);
      return this;
    }
    public CreateEventRequest.Builder commit(JsonNullable<String> commit) {
      this.instance.commit = commit;
      return this;
    }


    /**
    * returns a built CreateEventRequest instance.
    *
    * The builder is not reusable.
    */
    public CreateEventRequest build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static CreateEventRequest.Builder builder() {
    return new CreateEventRequest.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public CreateEventRequest.Builder toBuilder() {
    return new CreateEventRequest.Builder()
      .eventType(getEventType())
      .owner(getOwner())
      .repo(getRepo())
      .commit(getCommit());
  }

}

