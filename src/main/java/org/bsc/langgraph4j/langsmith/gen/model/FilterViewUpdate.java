/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.bsc.langgraph4j.langsmith.gen.model.FilterViewType;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * FilterViewUpdate
 */
@JsonPropertyOrder({
  FilterViewUpdate.JSON_PROPERTY_FILTER_STRING,
  FilterViewUpdate.JSON_PROPERTY_DISPLAY_NAME,
  FilterViewUpdate.JSON_PROPERTY_DESCRIPTION,
  FilterViewUpdate.JSON_PROPERTY_TRACE_FILTER_STRING,
  FilterViewUpdate.JSON_PROPERTY_TREE_FILTER_STRING,
  FilterViewUpdate.JSON_PROPERTY_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class FilterViewUpdate {
  public static final String JSON_PROPERTY_FILTER_STRING = "filter_string";
  private JsonNullable<String> filterString = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DISPLAY_NAME = "display_name";
  private JsonNullable<String> displayName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TRACE_FILTER_STRING = "trace_filter_string";
  private JsonNullable<String> traceFilterString = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TREE_FILTER_STRING = "tree_filter_string";
  private JsonNullable<String> treeFilterString = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TYPE = "type";
  private JsonNullable<FilterViewType> type = JsonNullable.<FilterViewType>undefined();

  public FilterViewUpdate() { 
  }

  public FilterViewUpdate filterString(@javax.annotation.Nullable String filterString) {
    this.filterString = JsonNullable.<String>of(filterString);
    return this;
  }

  /**
   * Get filterString
   * @return filterString
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getFilterString() {
        return filterString.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FILTER_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getFilterString_JsonNullable() {
    return filterString;
  }
  
  @JsonProperty(JSON_PROPERTY_FILTER_STRING)
  public void setFilterString_JsonNullable(JsonNullable<String> filterString) {
    this.filterString = filterString;
  }

  public void setFilterString(@javax.annotation.Nullable String filterString) {
    this.filterString = JsonNullable.<String>of(filterString);
  }


  public FilterViewUpdate displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = JsonNullable.<String>of(displayName);
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDisplayName() {
        return displayName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDisplayName_JsonNullable() {
    return displayName;
  }
  
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  public void setDisplayName_JsonNullable(JsonNullable<String> displayName) {
    this.displayName = displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = JsonNullable.<String>of(displayName);
  }


  public FilterViewUpdate description(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
  }


  public FilterViewUpdate traceFilterString(@javax.annotation.Nullable String traceFilterString) {
    this.traceFilterString = JsonNullable.<String>of(traceFilterString);
    return this;
  }

  /**
   * Get traceFilterString
   * @return traceFilterString
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTraceFilterString() {
        return traceFilterString.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRACE_FILTER_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTraceFilterString_JsonNullable() {
    return traceFilterString;
  }
  
  @JsonProperty(JSON_PROPERTY_TRACE_FILTER_STRING)
  public void setTraceFilterString_JsonNullable(JsonNullable<String> traceFilterString) {
    this.traceFilterString = traceFilterString;
  }

  public void setTraceFilterString(@javax.annotation.Nullable String traceFilterString) {
    this.traceFilterString = JsonNullable.<String>of(traceFilterString);
  }


  public FilterViewUpdate treeFilterString(@javax.annotation.Nullable String treeFilterString) {
    this.treeFilterString = JsonNullable.<String>of(treeFilterString);
    return this;
  }

  /**
   * Get treeFilterString
   * @return treeFilterString
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTreeFilterString() {
        return treeFilterString.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TREE_FILTER_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTreeFilterString_JsonNullable() {
    return treeFilterString;
  }
  
  @JsonProperty(JSON_PROPERTY_TREE_FILTER_STRING)
  public void setTreeFilterString_JsonNullable(JsonNullable<String> treeFilterString) {
    this.treeFilterString = treeFilterString;
  }

  public void setTreeFilterString(@javax.annotation.Nullable String treeFilterString) {
    this.treeFilterString = JsonNullable.<String>of(treeFilterString);
  }


  public FilterViewUpdate type(@javax.annotation.Nullable FilterViewType type) {
    this.type = JsonNullable.<FilterViewType>of(type);
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public FilterViewType getType() {
        return type.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<FilterViewType> getType_JsonNullable() {
    return type;
  }
  
  @JsonProperty(JSON_PROPERTY_TYPE)
  public void setType_JsonNullable(JsonNullable<FilterViewType> type) {
    this.type = type;
  }

  public void setType(@javax.annotation.Nullable FilterViewType type) {
    this.type = JsonNullable.<FilterViewType>of(type);
  }


  /**
   * Return true if this FilterViewUpdate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterViewUpdate filterViewUpdate = (FilterViewUpdate) o;
    return equalsNullable(this.filterString, filterViewUpdate.filterString) &&
        equalsNullable(this.displayName, filterViewUpdate.displayName) &&
        equalsNullable(this.description, filterViewUpdate.description) &&
        equalsNullable(this.traceFilterString, filterViewUpdate.traceFilterString) &&
        equalsNullable(this.treeFilterString, filterViewUpdate.treeFilterString) &&
        equalsNullable(this.type, filterViewUpdate.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(filterString), hashCodeNullable(displayName), hashCodeNullable(description), hashCodeNullable(traceFilterString), hashCodeNullable(treeFilterString), hashCodeNullable(type));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterViewUpdate {\n");
    sb.append("    filterString: ").append(toIndentedString(filterString)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    traceFilterString: ").append(toIndentedString(traceFilterString)).append("\n");
    sb.append("    treeFilterString: ").append(toIndentedString(treeFilterString)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `filter_string` to the URL query string
    if (getFilterString() != null) {
      joiner.add(String.format("%sfilter_string%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFilterString()))));
    }

    // add `display_name` to the URL query string
    if (getDisplayName() != null) {
      joiner.add(String.format("%sdisplay_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDisplayName()))));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
    }

    // add `trace_filter_string` to the URL query string
    if (getTraceFilterString() != null) {
      joiner.add(String.format("%strace_filter_string%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTraceFilterString()))));
    }

    // add `tree_filter_string` to the URL query string
    if (getTreeFilterString() != null) {
      joiner.add(String.format("%stree_filter_string%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTreeFilterString()))));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getType()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private FilterViewUpdate instance;

    public Builder() {
      this(new FilterViewUpdate());
    }

    protected Builder(FilterViewUpdate instance) {
      this.instance = instance;
    }

    public FilterViewUpdate.Builder filterString(String filterString) {
      this.instance.filterString = JsonNullable.<String>of(filterString);
      return this;
    }
    public FilterViewUpdate.Builder filterString(JsonNullable<String> filterString) {
      this.instance.filterString = filterString;
      return this;
    }
    public FilterViewUpdate.Builder displayName(String displayName) {
      this.instance.displayName = JsonNullable.<String>of(displayName);
      return this;
    }
    public FilterViewUpdate.Builder displayName(JsonNullable<String> displayName) {
      this.instance.displayName = displayName;
      return this;
    }
    public FilterViewUpdate.Builder description(String description) {
      this.instance.description = JsonNullable.<String>of(description);
      return this;
    }
    public FilterViewUpdate.Builder description(JsonNullable<String> description) {
      this.instance.description = description;
      return this;
    }
    public FilterViewUpdate.Builder traceFilterString(String traceFilterString) {
      this.instance.traceFilterString = JsonNullable.<String>of(traceFilterString);
      return this;
    }
    public FilterViewUpdate.Builder traceFilterString(JsonNullable<String> traceFilterString) {
      this.instance.traceFilterString = traceFilterString;
      return this;
    }
    public FilterViewUpdate.Builder treeFilterString(String treeFilterString) {
      this.instance.treeFilterString = JsonNullable.<String>of(treeFilterString);
      return this;
    }
    public FilterViewUpdate.Builder treeFilterString(JsonNullable<String> treeFilterString) {
      this.instance.treeFilterString = treeFilterString;
      return this;
    }
    public FilterViewUpdate.Builder type(FilterViewType type) {
      this.instance.type = JsonNullable.<FilterViewType>of(type);
      return this;
    }
    public FilterViewUpdate.Builder type(JsonNullable<FilterViewType> type) {
      this.instance.type = type;
      return this;
    }


    /**
    * returns a built FilterViewUpdate instance.
    *
    * The builder is not reusable.
    */
    public FilterViewUpdate build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static FilterViewUpdate.Builder builder() {
    return new FilterViewUpdate.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public FilterViewUpdate.Builder toBuilder() {
    return new FilterViewUpdate.Builder()
      .filterString(getFilterString())
      .displayName(getDisplayName())
      .description(getDescription())
      .traceFilterString(getTraceFilterString())
      .treeFilterString(getTreeFilterString())
      .type(getType());
  }

}

