/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.UUID;
import org.bsc.langgraph4j.langsmith.gen.model.ResourceType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * TaggingCreate
 */
@JsonPropertyOrder({
  TaggingCreate.JSON_PROPERTY_TAG_VALUE_ID,
  TaggingCreate.JSON_PROPERTY_RESOURCE_TYPE,
  TaggingCreate.JSON_PROPERTY_RESOURCE_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class TaggingCreate {
  public static final String JSON_PROPERTY_TAG_VALUE_ID = "tag_value_id";
  @javax.annotation.Nonnull
  private UUID tagValueId;

  public static final String JSON_PROPERTY_RESOURCE_TYPE = "resource_type";
  @javax.annotation.Nonnull
  private ResourceType resourceType;

  public static final String JSON_PROPERTY_RESOURCE_ID = "resource_id";
  @javax.annotation.Nonnull
  private UUID resourceId;

  public TaggingCreate() { 
  }

  public TaggingCreate tagValueId(@javax.annotation.Nonnull UUID tagValueId) {
    this.tagValueId = tagValueId;
    return this;
  }

  /**
   * Get tagValueId
   * @return tagValueId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TAG_VALUE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getTagValueId() {
    return tagValueId;
  }


  @JsonProperty(JSON_PROPERTY_TAG_VALUE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTagValueId(@javax.annotation.Nonnull UUID tagValueId) {
    this.tagValueId = tagValueId;
  }


  public TaggingCreate resourceType(@javax.annotation.Nonnull ResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ResourceType getResourceType() {
    return resourceType;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceType(@javax.annotation.Nonnull ResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public TaggingCreate resourceId(@javax.annotation.Nonnull UUID resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getResourceId() {
    return resourceId;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResourceId(@javax.annotation.Nonnull UUID resourceId) {
    this.resourceId = resourceId;
  }


  /**
   * Return true if this TaggingCreate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaggingCreate taggingCreate = (TaggingCreate) o;
    return Objects.equals(this.tagValueId, taggingCreate.tagValueId) &&
        Objects.equals(this.resourceType, taggingCreate.resourceType) &&
        Objects.equals(this.resourceId, taggingCreate.resourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tagValueId, resourceType, resourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaggingCreate {\n");
    sb.append("    tagValueId: ").append(toIndentedString(tagValueId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `tag_value_id` to the URL query string
    if (getTagValueId() != null) {
      joiner.add(String.format("%stag_value_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTagValueId()))));
    }

    // add `resource_type` to the URL query string
    if (getResourceType() != null) {
      joiner.add(String.format("%sresource_type%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getResourceType()))));
    }

    // add `resource_id` to the URL query string
    if (getResourceId() != null) {
      joiner.add(String.format("%sresource_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getResourceId()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private TaggingCreate instance;

    public Builder() {
      this(new TaggingCreate());
    }

    protected Builder(TaggingCreate instance) {
      this.instance = instance;
    }

    public TaggingCreate.Builder tagValueId(UUID tagValueId) {
      this.instance.tagValueId = tagValueId;
      return this;
    }
    public TaggingCreate.Builder resourceType(ResourceType resourceType) {
      this.instance.resourceType = resourceType;
      return this;
    }
    public TaggingCreate.Builder resourceId(UUID resourceId) {
      this.instance.resourceId = resourceId;
      return this;
    }


    /**
    * returns a built TaggingCreate instance.
    *
    * The builder is not reusable.
    */
    public TaggingCreate build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static TaggingCreate.Builder builder() {
    return new TaggingCreate.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public TaggingCreate.Builder toBuilder() {
    return new TaggingCreate.Builder()
      .tagValueId(getTagValueId())
      .resourceType(getResourceType())
      .resourceId(getResourceId());
  }

}

