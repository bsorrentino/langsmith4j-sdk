/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * QueryFeedbackDelta
 */
@JsonPropertyOrder({
  QueryFeedbackDelta.JSON_PROPERTY_BASELINE_SESSION_ID,
  QueryFeedbackDelta.JSON_PROPERTY_COMPARISON_SESSION_IDS,
  QueryFeedbackDelta.JSON_PROPERTY_FEEDBACK_KEY,
  QueryFeedbackDelta.JSON_PROPERTY_FILTERS,
  QueryFeedbackDelta.JSON_PROPERTY_OFFSET,
  QueryFeedbackDelta.JSON_PROPERTY_LIMIT,
  QueryFeedbackDelta.JSON_PROPERTY_COMPARATIVE_EXPERIMENT_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class QueryFeedbackDelta {
  public static final String JSON_PROPERTY_BASELINE_SESSION_ID = "baseline_session_id";
  @javax.annotation.Nonnull
  private UUID baselineSessionId;

  public static final String JSON_PROPERTY_COMPARISON_SESSION_IDS = "comparison_session_ids";
  @javax.annotation.Nonnull
  private List<UUID> comparisonSessionIds = new ArrayList<>();

  public static final String JSON_PROPERTY_FEEDBACK_KEY = "feedback_key";
  @javax.annotation.Nonnull
  private String feedbackKey;

  public static final String JSON_PROPERTY_FILTERS = "filters";
  private JsonNullable<Map<String, List<String>>> filters = JsonNullable.<Map<String, List<String>>>undefined();

  public static final String JSON_PROPERTY_OFFSET = "offset";
  @javax.annotation.Nullable
  private Integer offset = 0;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  @javax.annotation.Nullable
  private Integer limit = 100;

  public static final String JSON_PROPERTY_COMPARATIVE_EXPERIMENT_ID = "comparative_experiment_id";
  private JsonNullable<UUID> comparativeExperimentId = JsonNullable.<UUID>undefined();

  public QueryFeedbackDelta() { 
  }

  public QueryFeedbackDelta baselineSessionId(@javax.annotation.Nonnull UUID baselineSessionId) {
    this.baselineSessionId = baselineSessionId;
    return this;
  }

  /**
   * Get baselineSessionId
   * @return baselineSessionId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BASELINE_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getBaselineSessionId() {
    return baselineSessionId;
  }


  @JsonProperty(JSON_PROPERTY_BASELINE_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBaselineSessionId(@javax.annotation.Nonnull UUID baselineSessionId) {
    this.baselineSessionId = baselineSessionId;
  }


  public QueryFeedbackDelta comparisonSessionIds(@javax.annotation.Nonnull List<UUID> comparisonSessionIds) {
    this.comparisonSessionIds = comparisonSessionIds;
    return this;
  }

  public QueryFeedbackDelta addComparisonSessionIdsItem(UUID comparisonSessionIdsItem) {
    if (this.comparisonSessionIds == null) {
      this.comparisonSessionIds = new ArrayList<>();
    }
    this.comparisonSessionIds.add(comparisonSessionIdsItem);
    return this;
  }

  /**
   * Get comparisonSessionIds
   * @return comparisonSessionIds
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMPARISON_SESSION_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<UUID> getComparisonSessionIds() {
    return comparisonSessionIds;
  }


  @JsonProperty(JSON_PROPERTY_COMPARISON_SESSION_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setComparisonSessionIds(@javax.annotation.Nonnull List<UUID> comparisonSessionIds) {
    this.comparisonSessionIds = comparisonSessionIds;
  }


  public QueryFeedbackDelta feedbackKey(@javax.annotation.Nonnull String feedbackKey) {
    this.feedbackKey = feedbackKey;
    return this;
  }

  /**
   * Get feedbackKey
   * @return feedbackKey
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FEEDBACK_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getFeedbackKey() {
    return feedbackKey;
  }


  @JsonProperty(JSON_PROPERTY_FEEDBACK_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFeedbackKey(@javax.annotation.Nonnull String feedbackKey) {
    this.feedbackKey = feedbackKey;
  }


  public QueryFeedbackDelta filters(@javax.annotation.Nullable Map<String, List<String>> filters) {
    this.filters = JsonNullable.<Map<String, List<String>>>of(filters);
    return this;
  }

  public QueryFeedbackDelta putFiltersItem(String key, List<String> filtersItem) {
    if (this.filters == null || !this.filters.isPresent()) {
      this.filters = JsonNullable.<Map<String, List<String>>>of(new HashMap<>());
    }
    try {
      this.filters.get().put(key, filtersItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Map<String, List<String>> getFilters() {
        return filters.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, List<String>>> getFilters_JsonNullable() {
    return filters;
  }
  
  @JsonProperty(JSON_PROPERTY_FILTERS)
  public void setFilters_JsonNullable(JsonNullable<Map<String, List<String>>> filters) {
    this.filters = filters;
  }

  public void setFilters(@javax.annotation.Nullable Map<String, List<String>> filters) {
    this.filters = JsonNullable.<Map<String, List<String>>>of(filters);
  }


  public QueryFeedbackDelta offset(@javax.annotation.Nullable Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * minimum: 0
   * @return offset
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getOffset() {
    return offset;
  }


  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOffset(@javax.annotation.Nullable Integer offset) {
    this.offset = offset;
  }


  public QueryFeedbackDelta limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * minimum: 1
   * maximum: 100
   * @return limit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public QueryFeedbackDelta comparativeExperimentId(@javax.annotation.Nullable UUID comparativeExperimentId) {
    this.comparativeExperimentId = JsonNullable.<UUID>of(comparativeExperimentId);
    return this;
  }

  /**
   * Get comparativeExperimentId
   * @return comparativeExperimentId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public UUID getComparativeExperimentId() {
        return comparativeExperimentId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPARATIVE_EXPERIMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getComparativeExperimentId_JsonNullable() {
    return comparativeExperimentId;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPARATIVE_EXPERIMENT_ID)
  public void setComparativeExperimentId_JsonNullable(JsonNullable<UUID> comparativeExperimentId) {
    this.comparativeExperimentId = comparativeExperimentId;
  }

  public void setComparativeExperimentId(@javax.annotation.Nullable UUID comparativeExperimentId) {
    this.comparativeExperimentId = JsonNullable.<UUID>of(comparativeExperimentId);
  }


  /**
   * Return true if this QueryFeedbackDelta object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryFeedbackDelta queryFeedbackDelta = (QueryFeedbackDelta) o;
    return Objects.equals(this.baselineSessionId, queryFeedbackDelta.baselineSessionId) &&
        Objects.equals(this.comparisonSessionIds, queryFeedbackDelta.comparisonSessionIds) &&
        Objects.equals(this.feedbackKey, queryFeedbackDelta.feedbackKey) &&
        equalsNullable(this.filters, queryFeedbackDelta.filters) &&
        Objects.equals(this.offset, queryFeedbackDelta.offset) &&
        Objects.equals(this.limit, queryFeedbackDelta.limit) &&
        equalsNullable(this.comparativeExperimentId, queryFeedbackDelta.comparativeExperimentId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(baselineSessionId, comparisonSessionIds, feedbackKey, hashCodeNullable(filters), offset, limit, hashCodeNullable(comparativeExperimentId));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryFeedbackDelta {\n");
    sb.append("    baselineSessionId: ").append(toIndentedString(baselineSessionId)).append("\n");
    sb.append("    comparisonSessionIds: ").append(toIndentedString(comparisonSessionIds)).append("\n");
    sb.append("    feedbackKey: ").append(toIndentedString(feedbackKey)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    comparativeExperimentId: ").append(toIndentedString(comparativeExperimentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `baseline_session_id` to the URL query string
    if (getBaselineSessionId() != null) {
      joiner.add(String.format("%sbaseline_session_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBaselineSessionId()))));
    }

    // add `comparison_session_ids` to the URL query string
    if (getComparisonSessionIds() != null) {
      for (int i = 0; i < getComparisonSessionIds().size(); i++) {
        if (getComparisonSessionIds().get(i) != null) {
          joiner.add(String.format("%scomparison_session_ids%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              ApiClient.urlEncode(ApiClient.valueToString(getComparisonSessionIds().get(i)))));
        }
      }
    }

    // add `feedback_key` to the URL query string
    if (getFeedbackKey() != null) {
      joiner.add(String.format("%sfeedback_key%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFeedbackKey()))));
    }

    // add `filters` to the URL query string
    if (getFilters() != null) {
      for (String _key : getFilters().keySet()) {
        joiner.add(String.format("%sfilters%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getFilters().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getFilters().get(_key)))));
      }
    }

    // add `offset` to the URL query string
    if (getOffset() != null) {
      joiner.add(String.format("%soffset%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getOffset()))));
    }

    // add `limit` to the URL query string
    if (getLimit() != null) {
      joiner.add(String.format("%slimit%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLimit()))));
    }

    // add `comparative_experiment_id` to the URL query string
    if (getComparativeExperimentId() != null) {
      joiner.add(String.format("%scomparative_experiment_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getComparativeExperimentId()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private QueryFeedbackDelta instance;

    public Builder() {
      this(new QueryFeedbackDelta());
    }

    protected Builder(QueryFeedbackDelta instance) {
      this.instance = instance;
    }

    public QueryFeedbackDelta.Builder baselineSessionId(UUID baselineSessionId) {
      this.instance.baselineSessionId = baselineSessionId;
      return this;
    }
    public QueryFeedbackDelta.Builder comparisonSessionIds(List<UUID> comparisonSessionIds) {
      this.instance.comparisonSessionIds = comparisonSessionIds;
      return this;
    }
    public QueryFeedbackDelta.Builder feedbackKey(String feedbackKey) {
      this.instance.feedbackKey = feedbackKey;
      return this;
    }
    public QueryFeedbackDelta.Builder filters(Map<String, List<String>> filters) {
      this.instance.filters = JsonNullable.<Map<String, List<String>>>of(filters);
      return this;
    }
    public QueryFeedbackDelta.Builder filters(JsonNullable<Map<String, List<String>>> filters) {
      this.instance.filters = filters;
      return this;
    }
    public QueryFeedbackDelta.Builder offset(Integer offset) {
      this.instance.offset = offset;
      return this;
    }
    public QueryFeedbackDelta.Builder limit(Integer limit) {
      this.instance.limit = limit;
      return this;
    }
    public QueryFeedbackDelta.Builder comparativeExperimentId(UUID comparativeExperimentId) {
      this.instance.comparativeExperimentId = JsonNullable.<UUID>of(comparativeExperimentId);
      return this;
    }
    public QueryFeedbackDelta.Builder comparativeExperimentId(JsonNullable<UUID> comparativeExperimentId) {
      this.instance.comparativeExperimentId = comparativeExperimentId;
      return this;
    }


    /**
    * returns a built QueryFeedbackDelta instance.
    *
    * The builder is not reusable.
    */
    public QueryFeedbackDelta build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static QueryFeedbackDelta.Builder builder() {
    return new QueryFeedbackDelta.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public QueryFeedbackDelta.Builder toBuilder() {
    return new QueryFeedbackDelta.Builder()
      .baselineSessionId(getBaselineSessionId())
      .comparisonSessionIds(getComparisonSessionIds())
      .feedbackKey(getFeedbackKey())
      .filters(getFilters())
      .offset(getOffset())
      .limit(getLimit())
      .comparativeExperimentId(getComparativeExperimentId());
  }

}

