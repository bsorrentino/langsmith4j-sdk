/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.bsc.langgraph4j.langsmith.gen.model.TenantShareDatasetToken;
import org.bsc.langgraph4j.langsmith.gen.model.TenantShareRunToken;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import com.fasterxml.jackson.core.type.TypeReference;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.bsc.langgraph4j.langsmith.gen.ApiClient;
import org.bsc.langgraph4j.langsmith.gen.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
@JsonDeserialize(using = TenantShareTokensResponseEntitiesInner.TenantShareTokensResponseEntitiesInnerDeserializer.class)
@JsonSerialize(using = TenantShareTokensResponseEntitiesInner.TenantShareTokensResponseEntitiesInnerSerializer.class)
public class TenantShareTokensResponseEntitiesInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TenantShareTokensResponseEntitiesInner.class.getName());

    public static class TenantShareTokensResponseEntitiesInnerSerializer extends StdSerializer<TenantShareTokensResponseEntitiesInner> {
        public TenantShareTokensResponseEntitiesInnerSerializer(Class<TenantShareTokensResponseEntitiesInner> t) {
            super(t);
        }

        public TenantShareTokensResponseEntitiesInnerSerializer() {
            this(null);
        }

        @Override
        public void serialize(TenantShareTokensResponseEntitiesInner value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class TenantShareTokensResponseEntitiesInnerDeserializer extends StdDeserializer<TenantShareTokensResponseEntitiesInner> {
        public TenantShareTokensResponseEntitiesInnerDeserializer() {
            this(TenantShareTokensResponseEntitiesInner.class);
        }

        public TenantShareTokensResponseEntitiesInnerDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public TenantShareTokensResponseEntitiesInner deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize TenantShareDatasetToken
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (TenantShareDatasetToken.class.equals(Integer.class) || TenantShareDatasetToken.class.equals(Long.class) || TenantShareDatasetToken.class.equals(Float.class) || TenantShareDatasetToken.class.equals(Double.class) || TenantShareDatasetToken.class.equals(Boolean.class) || TenantShareDatasetToken.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((TenantShareDatasetToken.class.equals(Integer.class) || TenantShareDatasetToken.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((TenantShareDatasetToken.class.equals(Float.class) || TenantShareDatasetToken.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (TenantShareDatasetToken.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (TenantShareDatasetToken.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(TenantShareDatasetToken.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'TenantShareDatasetToken'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'TenantShareDatasetToken'", e);
            }

            // deserialize TenantShareRunToken
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (TenantShareRunToken.class.equals(Integer.class) || TenantShareRunToken.class.equals(Long.class) || TenantShareRunToken.class.equals(Float.class) || TenantShareRunToken.class.equals(Double.class) || TenantShareRunToken.class.equals(Boolean.class) || TenantShareRunToken.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((TenantShareRunToken.class.equals(Integer.class) || TenantShareRunToken.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((TenantShareRunToken.class.equals(Float.class) || TenantShareRunToken.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (TenantShareRunToken.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (TenantShareRunToken.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(TenantShareRunToken.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'TenantShareRunToken'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'TenantShareRunToken'", e);
            }

            if (match == 1) {
                TenantShareTokensResponseEntitiesInner ret = new TenantShareTokensResponseEntitiesInner();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for TenantShareTokensResponseEntitiesInner: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public TenantShareTokensResponseEntitiesInner getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "TenantShareTokensResponseEntitiesInner cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<>();

    public TenantShareTokensResponseEntitiesInner() {
        super("oneOf", Boolean.FALSE);
    }

    public TenantShareTokensResponseEntitiesInner(TenantShareDatasetToken o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TenantShareTokensResponseEntitiesInner(TenantShareRunToken o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("TenantShareDatasetToken", TenantShareDatasetToken.class);
        schemas.put("TenantShareRunToken", TenantShareRunToken.class);
        JSON.registerDescendants(TenantShareTokensResponseEntitiesInner.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("dataset", TenantShareDatasetToken.class);
        mappings.put("run", TenantShareRunToken.class);
        mappings.put("TenantShareDatasetToken", TenantShareDatasetToken.class);
        mappings.put("TenantShareRunToken", TenantShareRunToken.class);
        mappings.put("TenantShareTokensResponse_entities_inner", TenantShareTokensResponseEntitiesInner.class);
        JSON.registerDiscriminator(TenantShareTokensResponseEntitiesInner.class, "type", mappings);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TenantShareTokensResponseEntitiesInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * TenantShareDatasetToken, TenantShareRunToken
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(TenantShareDatasetToken.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(TenantShareRunToken.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be TenantShareDatasetToken, TenantShareRunToken");
    }

    /**
     * Get the actual instance, which can be the following:
     * TenantShareDatasetToken, TenantShareRunToken
     *
     * @return The actual instance (TenantShareDatasetToken, TenantShareRunToken)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `TenantShareDatasetToken`. If the actual instance is not `TenantShareDatasetToken`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TenantShareDatasetToken`
     * @throws ClassCastException if the instance is not `TenantShareDatasetToken`
     */
    public TenantShareDatasetToken getTenantShareDatasetToken() throws ClassCastException {
        return (TenantShareDatasetToken)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TenantShareRunToken`. If the actual instance is not `TenantShareRunToken`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TenantShareRunToken`
     * @throws ClassCastException if the instance is not `TenantShareRunToken`
     */
    public TenantShareRunToken getTenantShareRunToken() throws ClassCastException {
        return (TenantShareRunToken)super.getActualInstance();
    }



  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    if (getActualInstance() instanceof TenantShareRunToken) {
        if (getActualInstance() != null) {
          joiner.add(((TenantShareRunToken)getActualInstance()).toUrlQueryString(prefix + "one_of_0" + suffix));
        }
        return joiner.toString();
    }
    if (getActualInstance() instanceof TenantShareDatasetToken) {
        if (getActualInstance() != null) {
          joiner.add(((TenantShareDatasetToken)getActualInstance()).toUrlQueryString(prefix + "one_of_1" + suffix));
        }
        return joiner.toString();
    }
    return null;
  }

}

