/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.bsc.langgraph4j.langsmith.gen.model.BatchIngestConfig;
import org.bsc.langgraph4j.langsmith.gen.model.CustomerInfo;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * The LangSmith server info.
 */
@JsonPropertyOrder({
  InfoGetResponse.JSON_PROPERTY_VERSION,
  InfoGetResponse.JSON_PROPERTY_LICENSE_EXPIRATION_TIME,
  InfoGetResponse.JSON_PROPERTY_BATCH_INGEST_CONFIG,
  InfoGetResponse.JSON_PROPERTY_INSTANCE_FLAGS,
  InfoGetResponse.JSON_PROPERTY_CUSTOMER_INFO
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class InfoGetResponse {
  public static final String JSON_PROPERTY_VERSION = "version";
  @javax.annotation.Nonnull
  private String version;

  public static final String JSON_PROPERTY_LICENSE_EXPIRATION_TIME = "license_expiration_time";
  private JsonNullable<OffsetDateTime> licenseExpirationTime = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_BATCH_INGEST_CONFIG = "batch_ingest_config";
  @javax.annotation.Nullable
  private BatchIngestConfig batchIngestConfig;

  public static final String JSON_PROPERTY_INSTANCE_FLAGS = "instance_flags";
  @javax.annotation.Nullable
  private Object instanceFlags;

  public static final String JSON_PROPERTY_CUSTOMER_INFO = "customer_info";
  private JsonNullable<CustomerInfo> customerInfo = JsonNullable.<CustomerInfo>undefined();

  public InfoGetResponse() { 
  }

  public InfoGetResponse version(@javax.annotation.Nonnull String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(@javax.annotation.Nonnull String version) {
    this.version = version;
  }


  public InfoGetResponse licenseExpirationTime(@javax.annotation.Nullable OffsetDateTime licenseExpirationTime) {
    this.licenseExpirationTime = JsonNullable.<OffsetDateTime>of(licenseExpirationTime);
    return this;
  }

  /**
   * Get licenseExpirationTime
   * @return licenseExpirationTime
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public OffsetDateTime getLicenseExpirationTime() {
        return licenseExpirationTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LICENSE_EXPIRATION_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getLicenseExpirationTime_JsonNullable() {
    return licenseExpirationTime;
  }
  
  @JsonProperty(JSON_PROPERTY_LICENSE_EXPIRATION_TIME)
  public void setLicenseExpirationTime_JsonNullable(JsonNullable<OffsetDateTime> licenseExpirationTime) {
    this.licenseExpirationTime = licenseExpirationTime;
  }

  public void setLicenseExpirationTime(@javax.annotation.Nullable OffsetDateTime licenseExpirationTime) {
    this.licenseExpirationTime = JsonNullable.<OffsetDateTime>of(licenseExpirationTime);
  }


  public InfoGetResponse batchIngestConfig(@javax.annotation.Nullable BatchIngestConfig batchIngestConfig) {
    this.batchIngestConfig = batchIngestConfig;
    return this;
  }

  /**
   * Get batchIngestConfig
   * @return batchIngestConfig
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BATCH_INGEST_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public BatchIngestConfig getBatchIngestConfig() {
    return batchIngestConfig;
  }


  @JsonProperty(JSON_PROPERTY_BATCH_INGEST_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBatchIngestConfig(@javax.annotation.Nullable BatchIngestConfig batchIngestConfig) {
    this.batchIngestConfig = batchIngestConfig;
  }


  public InfoGetResponse instanceFlags(@javax.annotation.Nullable Object instanceFlags) {
    this.instanceFlags = instanceFlags;
    return this;
  }

  /**
   * Get instanceFlags
   * @return instanceFlags
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSTANCE_FLAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getInstanceFlags() {
    return instanceFlags;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCE_FLAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstanceFlags(@javax.annotation.Nullable Object instanceFlags) {
    this.instanceFlags = instanceFlags;
  }


  public InfoGetResponse customerInfo(@javax.annotation.Nullable CustomerInfo customerInfo) {
    this.customerInfo = JsonNullable.<CustomerInfo>of(customerInfo);
    return this;
  }

  /**
   * Get customerInfo
   * @return customerInfo
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public CustomerInfo getCustomerInfo() {
        return customerInfo.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CUSTOMER_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<CustomerInfo> getCustomerInfo_JsonNullable() {
    return customerInfo;
  }
  
  @JsonProperty(JSON_PROPERTY_CUSTOMER_INFO)
  public void setCustomerInfo_JsonNullable(JsonNullable<CustomerInfo> customerInfo) {
    this.customerInfo = customerInfo;
  }

  public void setCustomerInfo(@javax.annotation.Nullable CustomerInfo customerInfo) {
    this.customerInfo = JsonNullable.<CustomerInfo>of(customerInfo);
  }


  /**
   * Return true if this InfoGetResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoGetResponse infoGetResponse = (InfoGetResponse) o;
    return Objects.equals(this.version, infoGetResponse.version) &&
        equalsNullable(this.licenseExpirationTime, infoGetResponse.licenseExpirationTime) &&
        Objects.equals(this.batchIngestConfig, infoGetResponse.batchIngestConfig) &&
        Objects.equals(this.instanceFlags, infoGetResponse.instanceFlags) &&
        equalsNullable(this.customerInfo, infoGetResponse.customerInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, hashCodeNullable(licenseExpirationTime), batchIngestConfig, instanceFlags, hashCodeNullable(customerInfo));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoGetResponse {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    licenseExpirationTime: ").append(toIndentedString(licenseExpirationTime)).append("\n");
    sb.append("    batchIngestConfig: ").append(toIndentedString(batchIngestConfig)).append("\n");
    sb.append("    instanceFlags: ").append(toIndentedString(instanceFlags)).append("\n");
    sb.append("    customerInfo: ").append(toIndentedString(customerInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sversion%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getVersion()))));
    }

    // add `license_expiration_time` to the URL query string
    if (getLicenseExpirationTime() != null) {
      joiner.add(String.format("%slicense_expiration_time%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLicenseExpirationTime()))));
    }

    // add `batch_ingest_config` to the URL query string
    if (getBatchIngestConfig() != null) {
      joiner.add(getBatchIngestConfig().toUrlQueryString(prefix + "batch_ingest_config" + suffix));
    }

    // add `instance_flags` to the URL query string
    if (getInstanceFlags() != null) {
      joiner.add(String.format("%sinstance_flags%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getInstanceFlags()))));
    }

    // add `customer_info` to the URL query string
    if (getCustomerInfo() != null) {
      joiner.add(getCustomerInfo().toUrlQueryString(prefix + "customer_info" + suffix));
    }

    return joiner.toString();
  }

    public static class Builder {

    private InfoGetResponse instance;

    public Builder() {
      this(new InfoGetResponse());
    }

    protected Builder(InfoGetResponse instance) {
      this.instance = instance;
    }

    public InfoGetResponse.Builder version(String version) {
      this.instance.version = version;
      return this;
    }
    public InfoGetResponse.Builder licenseExpirationTime(OffsetDateTime licenseExpirationTime) {
      this.instance.licenseExpirationTime = JsonNullable.<OffsetDateTime>of(licenseExpirationTime);
      return this;
    }
    public InfoGetResponse.Builder licenseExpirationTime(JsonNullable<OffsetDateTime> licenseExpirationTime) {
      this.instance.licenseExpirationTime = licenseExpirationTime;
      return this;
    }
    public InfoGetResponse.Builder batchIngestConfig(BatchIngestConfig batchIngestConfig) {
      this.instance.batchIngestConfig = batchIngestConfig;
      return this;
    }
    public InfoGetResponse.Builder instanceFlags(Object instanceFlags) {
      this.instance.instanceFlags = instanceFlags;
      return this;
    }
    public InfoGetResponse.Builder customerInfo(CustomerInfo customerInfo) {
      this.instance.customerInfo = JsonNullable.<CustomerInfo>of(customerInfo);
      return this;
    }
    public InfoGetResponse.Builder customerInfo(JsonNullable<CustomerInfo> customerInfo) {
      this.instance.customerInfo = customerInfo;
      return this;
    }


    /**
    * returns a built InfoGetResponse instance.
    *
    * The builder is not reusable.
    */
    public InfoGetResponse build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static InfoGetResponse.Builder builder() {
    return new InfoGetResponse.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public InfoGetResponse.Builder toBuilder() {
    return new InfoGetResponse.Builder()
      .version(getVersion())
      .licenseExpirationTime(getLicenseExpirationTime())
      .batchIngestConfig(getBatchIngestConfig())
      .instanceFlags(getInstanceFlags())
      .customerInfo(getCustomerInfo());
  }

}

