/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * AttachmentsOperations
 */
@JsonPropertyOrder({
  AttachmentsOperations.JSON_PROPERTY_RENAME,
  AttachmentsOperations.JSON_PROPERTY_RETAIN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class AttachmentsOperations {
  public static final String JSON_PROPERTY_RENAME = "rename";
  @javax.annotation.Nullable
  private Map<String, String> rename = new HashMap<>();

  public static final String JSON_PROPERTY_RETAIN = "retain";
  @javax.annotation.Nullable
  private List<String> retain = new ArrayList<>();

  public AttachmentsOperations() { 
  }

  public AttachmentsOperations rename(@javax.annotation.Nullable Map<String, String> rename) {
    this.rename = rename;
    return this;
  }

  public AttachmentsOperations putRenameItem(String key, String renameItem) {
    if (this.rename == null) {
      this.rename = new HashMap<>();
    }
    this.rename.put(key, renameItem);
    return this;
  }

  /**
   * Mapping of old attachment names to new names
   * @return rename
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RENAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getRename() {
    return rename;
  }


  @JsonProperty(JSON_PROPERTY_RENAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRename(@javax.annotation.Nullable Map<String, String> rename) {
    this.rename = rename;
  }


  public AttachmentsOperations retain(@javax.annotation.Nullable List<String> retain) {
    this.retain = retain;
    return this;
  }

  public AttachmentsOperations addRetainItem(String retainItem) {
    if (this.retain == null) {
      this.retain = new ArrayList<>();
    }
    this.retain.add(retainItem);
    return this;
  }

  /**
   * List of attachment names to keep
   * @return retain
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RETAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getRetain() {
    return retain;
  }


  @JsonProperty(JSON_PROPERTY_RETAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRetain(@javax.annotation.Nullable List<String> retain) {
    this.retain = retain;
  }


  /**
   * Return true if this AttachmentsOperations object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentsOperations attachmentsOperations = (AttachmentsOperations) o;
    return Objects.equals(this.rename, attachmentsOperations.rename) &&
        Objects.equals(this.retain, attachmentsOperations.retain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rename, retain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentsOperations {\n");
    sb.append("    rename: ").append(toIndentedString(rename)).append("\n");
    sb.append("    retain: ").append(toIndentedString(retain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `rename` to the URL query string
    if (getRename() != null) {
      for (String _key : getRename().keySet()) {
        joiner.add(String.format("%srename%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getRename().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getRename().get(_key)))));
      }
    }

    // add `retain` to the URL query string
    if (getRetain() != null) {
      for (int i = 0; i < getRetain().size(); i++) {
        joiner.add(String.format("%sretain%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getRetain().get(i)))));
      }
    }

    return joiner.toString();
  }

    public static class Builder {

    private AttachmentsOperations instance;

    public Builder() {
      this(new AttachmentsOperations());
    }

    protected Builder(AttachmentsOperations instance) {
      this.instance = instance;
    }

    public AttachmentsOperations.Builder rename(Map<String, String> rename) {
      this.instance.rename = rename;
      return this;
    }
    public AttachmentsOperations.Builder retain(List<String> retain) {
      this.instance.retain = retain;
      return this;
    }


    /**
    * returns a built AttachmentsOperations instance.
    *
    * The builder is not reusable.
    */
    public AttachmentsOperations build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static AttachmentsOperations.Builder builder() {
    return new AttachmentsOperations.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public AttachmentsOperations.Builder toBuilder() {
    return new AttachmentsOperations.Builder()
      .rename(getRename())
      .retain(getRetain());
  }

}

