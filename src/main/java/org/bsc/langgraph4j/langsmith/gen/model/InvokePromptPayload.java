/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * InvokePromptPayload
 */
@JsonPropertyOrder({
  InvokePromptPayload.JSON_PROPERTY_MESSAGES,
  InvokePromptPayload.JSON_PROPERTY_TEMPLATE_FORMAT,
  InvokePromptPayload.JSON_PROPERTY_INPUTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class InvokePromptPayload {
  public static final String JSON_PROPERTY_MESSAGES = "messages";
  @javax.annotation.Nonnull
  private List<List<Object>> messages = new ArrayList<>();

  public static final String JSON_PROPERTY_TEMPLATE_FORMAT = "template_format";
  @javax.annotation.Nonnull
  private String templateFormat;

  public static final String JSON_PROPERTY_INPUTS = "inputs";
  @javax.annotation.Nonnull
  private Object inputs;

  public InvokePromptPayload() { 
  }

  public InvokePromptPayload messages(@javax.annotation.Nonnull List<List<Object>> messages) {
    this.messages = messages;
    return this;
  }

  public InvokePromptPayload addMessagesItem(List<Object> messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * Get messages
   * @return messages
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<List<Object>> getMessages() {
    return messages;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessages(@javax.annotation.Nonnull List<List<Object>> messages) {
    this.messages = messages;
  }


  public InvokePromptPayload templateFormat(@javax.annotation.Nonnull String templateFormat) {
    this.templateFormat = templateFormat;
    return this;
  }

  /**
   * Get templateFormat
   * @return templateFormat
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEMPLATE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTemplateFormat() {
    return templateFormat;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTemplateFormat(@javax.annotation.Nonnull String templateFormat) {
    this.templateFormat = templateFormat;
  }


  public InvokePromptPayload inputs(@javax.annotation.Nonnull Object inputs) {
    this.inputs = inputs;
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Object getInputs() {
    return inputs;
  }


  @JsonProperty(JSON_PROPERTY_INPUTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInputs(@javax.annotation.Nonnull Object inputs) {
    this.inputs = inputs;
  }


  /**
   * Return true if this InvokePromptPayload object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvokePromptPayload invokePromptPayload = (InvokePromptPayload) o;
    return Objects.equals(this.messages, invokePromptPayload.messages) &&
        Objects.equals(this.templateFormat, invokePromptPayload.templateFormat) &&
        Objects.equals(this.inputs, invokePromptPayload.inputs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messages, templateFormat, inputs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvokePromptPayload {\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    templateFormat: ").append(toIndentedString(templateFormat)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `messages` to the URL query string
    if (getMessages() != null) {
      for (int i = 0; i < getMessages().size(); i++) {
        joiner.add(String.format("%smessages%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getMessages().get(i)))));
      }
    }

    // add `template_format` to the URL query string
    if (getTemplateFormat() != null) {
      joiner.add(String.format("%stemplate_format%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTemplateFormat()))));
    }

    // add `inputs` to the URL query string
    if (getInputs() != null) {
      joiner.add(String.format("%sinputs%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getInputs()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private InvokePromptPayload instance;

    public Builder() {
      this(new InvokePromptPayload());
    }

    protected Builder(InvokePromptPayload instance) {
      this.instance = instance;
    }

    public InvokePromptPayload.Builder messages(List<List<Object>> messages) {
      this.instance.messages = messages;
      return this;
    }
    public InvokePromptPayload.Builder templateFormat(String templateFormat) {
      this.instance.templateFormat = templateFormat;
      return this;
    }
    public InvokePromptPayload.Builder inputs(Object inputs) {
      this.instance.inputs = inputs;
      return this;
    }


    /**
    * returns a built InvokePromptPayload instance.
    *
    * The builder is not reusable.
    */
    public InvokePromptPayload build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static InvokePromptPayload.Builder builder() {
    return new InvokePromptPayload.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public InvokePromptPayload.Builder toBuilder() {
    return new InvokePromptPayload.Builder()
      .messages(getMessages())
      .templateFormat(getTemplateFormat())
      .inputs(getInputs());
  }

}

