/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.bsc.langgraph4j.langsmith.gen.model.AccessScope;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * Identity
 */
@JsonPropertyOrder({
  Identity.JSON_PROPERTY_ID,
  Identity.JSON_PROPERTY_ORGANIZATION_ID,
  Identity.JSON_PROPERTY_TENANT_ID,
  Identity.JSON_PROPERTY_CREATED_AT,
  Identity.JSON_PROPERTY_USER_ID,
  Identity.JSON_PROPERTY_LS_USER_ID,
  Identity.JSON_PROPERTY_READ_ONLY,
  Identity.JSON_PROPERTY_ROLE_ID,
  Identity.JSON_PROPERTY_ROLE_NAME,
  Identity.JSON_PROPERTY_ACCESS_SCOPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class Identity {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_ORGANIZATION_ID = "organization_id";
  @javax.annotation.Nonnull
  private UUID organizationId;

  public static final String JSON_PROPERTY_TENANT_ID = "tenant_id";
  private JsonNullable<UUID> tenantId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_USER_ID = "user_id";
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String JSON_PROPERTY_LS_USER_ID = "ls_user_id";
  @javax.annotation.Nonnull
  private UUID lsUserId;

  public static final String JSON_PROPERTY_READ_ONLY = "read_only";
  @javax.annotation.Nonnull
  private Boolean readOnly;

  public static final String JSON_PROPERTY_ROLE_ID = "role_id";
  private JsonNullable<UUID> roleId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_ROLE_NAME = "role_name";
  private JsonNullable<String> roleName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ACCESS_SCOPE = "access_scope";
  @javax.annotation.Nullable
  private AccessScope accessScope;

  public Identity() { 
  }

  public Identity id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public Identity organizationId(@javax.annotation.Nonnull UUID organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Get organizationId
   * @return organizationId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORGANIZATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getOrganizationId() {
    return organizationId;
  }


  @JsonProperty(JSON_PROPERTY_ORGANIZATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrganizationId(@javax.annotation.Nonnull UUID organizationId) {
    this.organizationId = organizationId;
  }


  public Identity tenantId(@javax.annotation.Nullable UUID tenantId) {
    this.tenantId = JsonNullable.<UUID>of(tenantId);
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public UUID getTenantId() {
        return tenantId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getTenantId_JsonNullable() {
    return tenantId;
  }
  
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  public void setTenantId_JsonNullable(JsonNullable<UUID> tenantId) {
    this.tenantId = tenantId;
  }

  public void setTenantId(@javax.annotation.Nullable UUID tenantId) {
    this.tenantId = JsonNullable.<UUID>of(tenantId);
  }


  public Identity createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Identity userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public Identity lsUserId(@javax.annotation.Nonnull UUID lsUserId) {
    this.lsUserId = lsUserId;
    return this;
  }

  /**
   * Get lsUserId
   * @return lsUserId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LS_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getLsUserId() {
    return lsUserId;
  }


  @JsonProperty(JSON_PROPERTY_LS_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLsUserId(@javax.annotation.Nonnull UUID lsUserId) {
    this.lsUserId = lsUserId;
  }


  public Identity readOnly(@javax.annotation.Nonnull Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getReadOnly() {
    return readOnly;
  }


  @JsonProperty(JSON_PROPERTY_READ_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReadOnly(@javax.annotation.Nonnull Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public Identity roleId(@javax.annotation.Nullable UUID roleId) {
    this.roleId = JsonNullable.<UUID>of(roleId);
    return this;
  }

  /**
   * Get roleId
   * @return roleId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public UUID getRoleId() {
        return roleId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ROLE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getRoleId_JsonNullable() {
    return roleId;
  }
  
  @JsonProperty(JSON_PROPERTY_ROLE_ID)
  public void setRoleId_JsonNullable(JsonNullable<UUID> roleId) {
    this.roleId = roleId;
  }

  public void setRoleId(@javax.annotation.Nullable UUID roleId) {
    this.roleId = JsonNullable.<UUID>of(roleId);
  }


  public Identity roleName(@javax.annotation.Nullable String roleName) {
    this.roleName = JsonNullable.<String>of(roleName);
    return this;
  }

  /**
   * Get roleName
   * @return roleName
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getRoleName() {
        return roleName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ROLE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRoleName_JsonNullable() {
    return roleName;
  }
  
  @JsonProperty(JSON_PROPERTY_ROLE_NAME)
  public void setRoleName_JsonNullable(JsonNullable<String> roleName) {
    this.roleName = roleName;
  }

  public void setRoleName(@javax.annotation.Nullable String roleName) {
    this.roleName = JsonNullable.<String>of(roleName);
  }


  public Identity accessScope(@javax.annotation.Nullable AccessScope accessScope) {
    this.accessScope = accessScope;
    return this;
  }

  /**
   * Get accessScope
   * @return accessScope
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCESS_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public AccessScope getAccessScope() {
    return accessScope;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccessScope(@javax.annotation.Nullable AccessScope accessScope) {
    this.accessScope = accessScope;
  }


  /**
   * Return true if this Identity object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Identity identity = (Identity) o;
    return Objects.equals(this.id, identity.id) &&
        Objects.equals(this.organizationId, identity.organizationId) &&
        equalsNullable(this.tenantId, identity.tenantId) &&
        Objects.equals(this.createdAt, identity.createdAt) &&
        Objects.equals(this.userId, identity.userId) &&
        Objects.equals(this.lsUserId, identity.lsUserId) &&
        Objects.equals(this.readOnly, identity.readOnly) &&
        equalsNullable(this.roleId, identity.roleId) &&
        equalsNullable(this.roleName, identity.roleName) &&
        Objects.equals(this.accessScope, identity.accessScope);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, organizationId, hashCodeNullable(tenantId), createdAt, userId, lsUserId, readOnly, hashCodeNullable(roleId), hashCodeNullable(roleName), accessScope);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Identity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    lsUserId: ").append(toIndentedString(lsUserId)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    accessScope: ").append(toIndentedString(accessScope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `organization_id` to the URL query string
    if (getOrganizationId() != null) {
      joiner.add(String.format("%sorganization_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getOrganizationId()))));
    }

    // add `tenant_id` to the URL query string
    if (getTenantId() != null) {
      joiner.add(String.format("%stenant_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTenantId()))));
    }

    // add `created_at` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%screated_at%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCreatedAt()))));
    }

    // add `user_id` to the URL query string
    if (getUserId() != null) {
      joiner.add(String.format("%suser_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUserId()))));
    }

    // add `ls_user_id` to the URL query string
    if (getLsUserId() != null) {
      joiner.add(String.format("%sls_user_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLsUserId()))));
    }

    // add `read_only` to the URL query string
    if (getReadOnly() != null) {
      joiner.add(String.format("%sread_only%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getReadOnly()))));
    }

    // add `role_id` to the URL query string
    if (getRoleId() != null) {
      joiner.add(String.format("%srole_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRoleId()))));
    }

    // add `role_name` to the URL query string
    if (getRoleName() != null) {
      joiner.add(String.format("%srole_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRoleName()))));
    }

    // add `access_scope` to the URL query string
    if (getAccessScope() != null) {
      joiner.add(String.format("%saccess_scope%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAccessScope()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private Identity instance;

    public Builder() {
      this(new Identity());
    }

    protected Builder(Identity instance) {
      this.instance = instance;
    }

    public Identity.Builder id(UUID id) {
      this.instance.id = id;
      return this;
    }
    public Identity.Builder organizationId(UUID organizationId) {
      this.instance.organizationId = organizationId;
      return this;
    }
    public Identity.Builder tenantId(UUID tenantId) {
      this.instance.tenantId = JsonNullable.<UUID>of(tenantId);
      return this;
    }
    public Identity.Builder tenantId(JsonNullable<UUID> tenantId) {
      this.instance.tenantId = tenantId;
      return this;
    }
    public Identity.Builder createdAt(OffsetDateTime createdAt) {
      this.instance.createdAt = createdAt;
      return this;
    }
    public Identity.Builder userId(UUID userId) {
      this.instance.userId = userId;
      return this;
    }
    public Identity.Builder lsUserId(UUID lsUserId) {
      this.instance.lsUserId = lsUserId;
      return this;
    }
    public Identity.Builder readOnly(Boolean readOnly) {
      this.instance.readOnly = readOnly;
      return this;
    }
    public Identity.Builder roleId(UUID roleId) {
      this.instance.roleId = JsonNullable.<UUID>of(roleId);
      return this;
    }
    public Identity.Builder roleId(JsonNullable<UUID> roleId) {
      this.instance.roleId = roleId;
      return this;
    }
    public Identity.Builder roleName(String roleName) {
      this.instance.roleName = JsonNullable.<String>of(roleName);
      return this;
    }
    public Identity.Builder roleName(JsonNullable<String> roleName) {
      this.instance.roleName = roleName;
      return this;
    }
    public Identity.Builder accessScope(AccessScope accessScope) {
      this.instance.accessScope = accessScope;
      return this;
    }


    /**
    * returns a built Identity instance.
    *
    * The builder is not reusable.
    */
    public Identity build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static Identity.Builder builder() {
    return new Identity.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public Identity.Builder toBuilder() {
    return new Identity.Builder()
      .id(getId())
      .organizationId(getOrganizationId())
      .tenantId(getTenantId())
      .createdAt(getCreatedAt())
      .userId(getUserId())
      .lsUserId(getLsUserId())
      .readOnly(getReadOnly())
      .roleId(getRoleId())
      .roleName(getRoleName())
      .accessScope(getAccessScope());
  }

}

