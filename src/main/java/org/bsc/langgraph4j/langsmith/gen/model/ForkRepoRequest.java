/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * Fields to fork a repo
 */
@JsonPropertyOrder({
  ForkRepoRequest.JSON_PROPERTY_REPO_HANDLE,
  ForkRepoRequest.JSON_PROPERTY_README,
  ForkRepoRequest.JSON_PROPERTY_DESCRIPTION,
  ForkRepoRequest.JSON_PROPERTY_TAGS,
  ForkRepoRequest.JSON_PROPERTY_IS_PUBLIC
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class ForkRepoRequest {
  public static final String JSON_PROPERTY_REPO_HANDLE = "repo_handle";
  @javax.annotation.Nonnull
  private String repoHandle;

  public static final String JSON_PROPERTY_README = "readme";
  private JsonNullable<String> readme = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TAGS = "tags";
  private JsonNullable<List<String>> tags = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_IS_PUBLIC = "is_public";
  private JsonNullable<Boolean> isPublic = JsonNullable.<Boolean>undefined();

  public ForkRepoRequest() { 
  }

  public ForkRepoRequest repoHandle(@javax.annotation.Nonnull String repoHandle) {
    this.repoHandle = repoHandle;
    return this;
  }

  /**
   * Get repoHandle
   * @return repoHandle
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REPO_HANDLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getRepoHandle() {
    return repoHandle;
  }


  @JsonProperty(JSON_PROPERTY_REPO_HANDLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRepoHandle(@javax.annotation.Nonnull String repoHandle) {
    this.repoHandle = repoHandle;
  }


  public ForkRepoRequest readme(@javax.annotation.Nullable String readme) {
    this.readme = JsonNullable.<String>of(readme);
    return this;
  }

  /**
   * Get readme
   * @return readme
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getReadme() {
        return readme.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_README)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getReadme_JsonNullable() {
    return readme;
  }
  
  @JsonProperty(JSON_PROPERTY_README)
  public void setReadme_JsonNullable(JsonNullable<String> readme) {
    this.readme = readme;
  }

  public void setReadme(@javax.annotation.Nullable String readme) {
    this.readme = JsonNullable.<String>of(readme);
  }


  public ForkRepoRequest description(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
  }


  public ForkRepoRequest tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = JsonNullable.<List<String>>of(tags);
    return this;
  }

  public ForkRepoRequest addTagsItem(String tagsItem) {
    if (this.tags == null || !this.tags.isPresent()) {
      this.tags = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.tags.get().add(tagsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<String> getTags() {
        return tags.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getTags_JsonNullable() {
    return tags;
  }
  
  @JsonProperty(JSON_PROPERTY_TAGS)
  public void setTags_JsonNullable(JsonNullable<List<String>> tags) {
    this.tags = tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = JsonNullable.<List<String>>of(tags);
  }


  public ForkRepoRequest isPublic(@javax.annotation.Nullable Boolean isPublic) {
    this.isPublic = JsonNullable.<Boolean>of(isPublic);
    return this;
  }

  /**
   * Get isPublic
   * @return isPublic
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Boolean getIsPublic() {
        return isPublic.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_IS_PUBLIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getIsPublic_JsonNullable() {
    return isPublic;
  }
  
  @JsonProperty(JSON_PROPERTY_IS_PUBLIC)
  public void setIsPublic_JsonNullable(JsonNullable<Boolean> isPublic) {
    this.isPublic = isPublic;
  }

  public void setIsPublic(@javax.annotation.Nullable Boolean isPublic) {
    this.isPublic = JsonNullable.<Boolean>of(isPublic);
  }


  /**
   * Return true if this ForkRepoRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForkRepoRequest forkRepoRequest = (ForkRepoRequest) o;
    return Objects.equals(this.repoHandle, forkRepoRequest.repoHandle) &&
        equalsNullable(this.readme, forkRepoRequest.readme) &&
        equalsNullable(this.description, forkRepoRequest.description) &&
        equalsNullable(this.tags, forkRepoRequest.tags) &&
        equalsNullable(this.isPublic, forkRepoRequest.isPublic);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(repoHandle, hashCodeNullable(readme), hashCodeNullable(description), hashCodeNullable(tags), hashCodeNullable(isPublic));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForkRepoRequest {\n");
    sb.append("    repoHandle: ").append(toIndentedString(repoHandle)).append("\n");
    sb.append("    readme: ").append(toIndentedString(readme)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `repo_handle` to the URL query string
    if (getRepoHandle() != null) {
      joiner.add(String.format("%srepo_handle%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRepoHandle()))));
    }

    // add `readme` to the URL query string
    if (getReadme() != null) {
      joiner.add(String.format("%sreadme%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getReadme()))));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
    }

    // add `tags` to the URL query string
    if (getTags() != null) {
      for (int i = 0; i < getTags().size(); i++) {
        joiner.add(String.format("%stags%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(getTags().get(i)))));
      }
    }

    // add `is_public` to the URL query string
    if (getIsPublic() != null) {
      joiner.add(String.format("%sis_public%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getIsPublic()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private ForkRepoRequest instance;

    public Builder() {
      this(new ForkRepoRequest());
    }

    protected Builder(ForkRepoRequest instance) {
      this.instance = instance;
    }

    public ForkRepoRequest.Builder repoHandle(String repoHandle) {
      this.instance.repoHandle = repoHandle;
      return this;
    }
    public ForkRepoRequest.Builder readme(String readme) {
      this.instance.readme = JsonNullable.<String>of(readme);
      return this;
    }
    public ForkRepoRequest.Builder readme(JsonNullable<String> readme) {
      this.instance.readme = readme;
      return this;
    }
    public ForkRepoRequest.Builder description(String description) {
      this.instance.description = JsonNullable.<String>of(description);
      return this;
    }
    public ForkRepoRequest.Builder description(JsonNullable<String> description) {
      this.instance.description = description;
      return this;
    }
    public ForkRepoRequest.Builder tags(List<String> tags) {
      this.instance.tags = JsonNullable.<List<String>>of(tags);
      return this;
    }
    public ForkRepoRequest.Builder tags(JsonNullable<List<String>> tags) {
      this.instance.tags = tags;
      return this;
    }
    public ForkRepoRequest.Builder isPublic(Boolean isPublic) {
      this.instance.isPublic = JsonNullable.<Boolean>of(isPublic);
      return this;
    }
    public ForkRepoRequest.Builder isPublic(JsonNullable<Boolean> isPublic) {
      this.instance.isPublic = isPublic;
      return this;
    }


    /**
    * returns a built ForkRepoRequest instance.
    *
    * The builder is not reusable.
    */
    public ForkRepoRequest build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static ForkRepoRequest.Builder builder() {
    return new ForkRepoRequest.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public ForkRepoRequest.Builder toBuilder() {
    return new ForkRepoRequest.Builder()
      .repoHandle(getRepoHandle())
      .readme(getReadme())
      .description(getDescription())
      .tags(getTags())
      .isPublic(getIsPublic());
  }

}

