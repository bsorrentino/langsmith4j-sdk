/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * StudioRunOverDatasetRequestSchema
 */
@JsonPropertyOrder({
  StudioRunOverDatasetRequestSchema.JSON_PROPERTY_PROJECT_NAME,
  StudioRunOverDatasetRequestSchema.JSON_PROPERTY_DATASET_ID,
  StudioRunOverDatasetRequestSchema.JSON_PROPERTY_EVALUATOR_RULES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class StudioRunOverDatasetRequestSchema {
  public static final String JSON_PROPERTY_PROJECT_NAME = "project_name";
  @javax.annotation.Nonnull
  private String projectName;

  public static final String JSON_PROPERTY_DATASET_ID = "dataset_id";
  @javax.annotation.Nonnull
  private UUID datasetId;

  public static final String JSON_PROPERTY_EVALUATOR_RULES = "evaluator_rules";
  private JsonNullable<List<UUID>> evaluatorRules = JsonNullable.<List<UUID>>undefined();

  public StudioRunOverDatasetRequestSchema() { 
  }

  public StudioRunOverDatasetRequestSchema projectName(@javax.annotation.Nonnull String projectName) {
    this.projectName = projectName;
    return this;
  }

  /**
   * Get projectName
   * @return projectName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getProjectName() {
    return projectName;
  }


  @JsonProperty(JSON_PROPERTY_PROJECT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProjectName(@javax.annotation.Nonnull String projectName) {
    this.projectName = projectName;
  }


  public StudioRunOverDatasetRequestSchema datasetId(@javax.annotation.Nonnull UUID datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * Get datasetId
   * @return datasetId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATASET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getDatasetId() {
    return datasetId;
  }


  @JsonProperty(JSON_PROPERTY_DATASET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDatasetId(@javax.annotation.Nonnull UUID datasetId) {
    this.datasetId = datasetId;
  }


  public StudioRunOverDatasetRequestSchema evaluatorRules(@javax.annotation.Nullable List<UUID> evaluatorRules) {
    this.evaluatorRules = JsonNullable.<List<UUID>>of(evaluatorRules);
    return this;
  }

  public StudioRunOverDatasetRequestSchema addEvaluatorRulesItem(UUID evaluatorRulesItem) {
    if (this.evaluatorRules == null || !this.evaluatorRules.isPresent()) {
      this.evaluatorRules = JsonNullable.<List<UUID>>of(new ArrayList<>());
    }
    try {
      this.evaluatorRules.get().add(evaluatorRulesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get evaluatorRules
   * @return evaluatorRules
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<UUID> getEvaluatorRules() {
        return evaluatorRules.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EVALUATOR_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<UUID>> getEvaluatorRules_JsonNullable() {
    return evaluatorRules;
  }
  
  @JsonProperty(JSON_PROPERTY_EVALUATOR_RULES)
  public void setEvaluatorRules_JsonNullable(JsonNullable<List<UUID>> evaluatorRules) {
    this.evaluatorRules = evaluatorRules;
  }

  public void setEvaluatorRules(@javax.annotation.Nullable List<UUID> evaluatorRules) {
    this.evaluatorRules = JsonNullable.<List<UUID>>of(evaluatorRules);
  }


  /**
   * Return true if this StudioRunOverDatasetRequestSchema object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StudioRunOverDatasetRequestSchema studioRunOverDatasetRequestSchema = (StudioRunOverDatasetRequestSchema) o;
    return Objects.equals(this.projectName, studioRunOverDatasetRequestSchema.projectName) &&
        Objects.equals(this.datasetId, studioRunOverDatasetRequestSchema.datasetId) &&
        equalsNullable(this.evaluatorRules, studioRunOverDatasetRequestSchema.evaluatorRules);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectName, datasetId, hashCodeNullable(evaluatorRules));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StudioRunOverDatasetRequestSchema {\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    evaluatorRules: ").append(toIndentedString(evaluatorRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `project_name` to the URL query string
    if (getProjectName() != null) {
      joiner.add(String.format("%sproject_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getProjectName()))));
    }

    // add `dataset_id` to the URL query string
    if (getDatasetId() != null) {
      joiner.add(String.format("%sdataset_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDatasetId()))));
    }

    // add `evaluator_rules` to the URL query string
    if (getEvaluatorRules() != null) {
      for (int i = 0; i < getEvaluatorRules().size(); i++) {
        if (getEvaluatorRules().get(i) != null) {
          joiner.add(String.format("%sevaluator_rules%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              ApiClient.urlEncode(ApiClient.valueToString(getEvaluatorRules().get(i)))));
        }
      }
    }

    return joiner.toString();
  }

    public static class Builder {

    private StudioRunOverDatasetRequestSchema instance;

    public Builder() {
      this(new StudioRunOverDatasetRequestSchema());
    }

    protected Builder(StudioRunOverDatasetRequestSchema instance) {
      this.instance = instance;
    }

    public StudioRunOverDatasetRequestSchema.Builder projectName(String projectName) {
      this.instance.projectName = projectName;
      return this;
    }
    public StudioRunOverDatasetRequestSchema.Builder datasetId(UUID datasetId) {
      this.instance.datasetId = datasetId;
      return this;
    }
    public StudioRunOverDatasetRequestSchema.Builder evaluatorRules(List<UUID> evaluatorRules) {
      this.instance.evaluatorRules = JsonNullable.<List<UUID>>of(evaluatorRules);
      return this;
    }
    public StudioRunOverDatasetRequestSchema.Builder evaluatorRules(JsonNullable<List<UUID>> evaluatorRules) {
      this.instance.evaluatorRules = evaluatorRules;
      return this;
    }


    /**
    * returns a built StudioRunOverDatasetRequestSchema instance.
    *
    * The builder is not reusable.
    */
    public StudioRunOverDatasetRequestSchema build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static StudioRunOverDatasetRequestSchema.Builder builder() {
    return new StudioRunOverDatasetRequestSchema.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public StudioRunOverDatasetRequestSchema.Builder toBuilder() {
    return new StudioRunOverDatasetRequestSchema.Builder()
      .projectName(getProjectName())
      .datasetId(getDatasetId())
      .evaluatorRules(getEvaluatorRules());
  }

}

