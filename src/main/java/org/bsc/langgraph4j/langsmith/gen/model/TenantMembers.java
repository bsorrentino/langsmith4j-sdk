/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.bsc.langgraph4j.langsmith.gen.model.MemberIdentity;
import org.bsc.langgraph4j.langsmith.gen.model.PendingIdentity;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * Tenant members schema.
 */
@JsonPropertyOrder({
  TenantMembers.JSON_PROPERTY_TENANT_ID,
  TenantMembers.JSON_PROPERTY_MEMBERS,
  TenantMembers.JSON_PROPERTY_PENDING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class TenantMembers {
  public static final String JSON_PROPERTY_TENANT_ID = "tenant_id";
  @javax.annotation.Nonnull
  private UUID tenantId;

  public static final String JSON_PROPERTY_MEMBERS = "members";
  @javax.annotation.Nonnull
  private List<MemberIdentity> members = new ArrayList<>();

  public static final String JSON_PROPERTY_PENDING = "pending";
  @javax.annotation.Nonnull
  private List<PendingIdentity> pending = new ArrayList<>();

  public TenantMembers() { 
  }

  public TenantMembers tenantId(@javax.annotation.Nonnull UUID tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Get tenantId
   * @return tenantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getTenantId() {
    return tenantId;
  }


  @JsonProperty(JSON_PROPERTY_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTenantId(@javax.annotation.Nonnull UUID tenantId) {
    this.tenantId = tenantId;
  }


  public TenantMembers members(@javax.annotation.Nonnull List<MemberIdentity> members) {
    this.members = members;
    return this;
  }

  public TenantMembers addMembersItem(MemberIdentity membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

  /**
   * Get members
   * @return members
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MEMBERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<MemberIdentity> getMembers() {
    return members;
  }


  @JsonProperty(JSON_PROPERTY_MEMBERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMembers(@javax.annotation.Nonnull List<MemberIdentity> members) {
    this.members = members;
  }


  public TenantMembers pending(@javax.annotation.Nonnull List<PendingIdentity> pending) {
    this.pending = pending;
    return this;
  }

  public TenantMembers addPendingItem(PendingIdentity pendingItem) {
    if (this.pending == null) {
      this.pending = new ArrayList<>();
    }
    this.pending.add(pendingItem);
    return this;
  }

  /**
   * Get pending
   * @return pending
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PENDING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<PendingIdentity> getPending() {
    return pending;
  }


  @JsonProperty(JSON_PROPERTY_PENDING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPending(@javax.annotation.Nonnull List<PendingIdentity> pending) {
    this.pending = pending;
  }


  /**
   * Return true if this TenantMembers object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TenantMembers tenantMembers = (TenantMembers) o;
    return Objects.equals(this.tenantId, tenantMembers.tenantId) &&
        Objects.equals(this.members, tenantMembers.members) &&
        Objects.equals(this.pending, tenantMembers.pending);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenantId, members, pending);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TenantMembers {\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `tenant_id` to the URL query string
    if (getTenantId() != null) {
      joiner.add(String.format("%stenant_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTenantId()))));
    }

    // add `members` to the URL query string
    if (getMembers() != null) {
      for (int i = 0; i < getMembers().size(); i++) {
        if (getMembers().get(i) != null) {
          joiner.add(getMembers().get(i).toUrlQueryString(String.format("%smembers%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `pending` to the URL query string
    if (getPending() != null) {
      for (int i = 0; i < getPending().size(); i++) {
        if (getPending().get(i) != null) {
          joiner.add(getPending().get(i).toUrlQueryString(String.format("%spending%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

    public static class Builder {

    private TenantMembers instance;

    public Builder() {
      this(new TenantMembers());
    }

    protected Builder(TenantMembers instance) {
      this.instance = instance;
    }

    public TenantMembers.Builder tenantId(UUID tenantId) {
      this.instance.tenantId = tenantId;
      return this;
    }
    public TenantMembers.Builder members(List<MemberIdentity> members) {
      this.instance.members = members;
      return this;
    }
    public TenantMembers.Builder pending(List<PendingIdentity> pending) {
      this.instance.pending = pending;
      return this;
    }


    /**
    * returns a built TenantMembers instance.
    *
    * The builder is not reusable.
    */
    public TenantMembers build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static TenantMembers.Builder builder() {
    return new TenantMembers.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public TenantMembers.Builder toBuilder() {
    return new TenantMembers.Builder()
      .tenantId(getTenantId())
      .members(getMembers())
      .pending(getPending());
  }

}

