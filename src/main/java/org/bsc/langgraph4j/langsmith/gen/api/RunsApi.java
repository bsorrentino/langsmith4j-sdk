/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.bsc.langgraph4j.langsmith.gen.api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.bsc.langgraph4j.langsmith.gen.ApiClient;
import org.bsc.langgraph4j.langsmith.gen.ApiException;
import org.bsc.langgraph4j.langsmith.gen.ApiResponse;
import org.bsc.langgraph4j.langsmith.gen.Configuration;
import org.bsc.langgraph4j.langsmith.gen.model.RunsBatchPostRequest;
import org.bsc.langgraph4j.langsmith.gen.model.RunsPost202ResponseValue;
import org.bsc.langgraph4j.langsmith.gen.model.RunsRun;

import java.io.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.time.Duration;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class RunsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RunsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public RunsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  private ApiException getApiException(String operationId, HttpResponse<String> response) {
    String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
    return new ApiException(response.statusCode(), message, response.headers(), response.body());
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Ingest Runs (Batch JSON)
   * Ingests a batch of runs in a single JSON payload. The payload must have &#x60;post&#x60; and/or &#x60;patch&#x60; arrays containing run objects. Prefer this endpoint over single‑run ingestion when submitting hundreds of runs, but &#x60;/runs/multipart&#x60; offers better handling for very large fields and attachments.
   * @param runsBatchPostRequest  (required)
   * @return CompletableFuture&lt;Map&lt;String, RunsPost202ResponseValue&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Map<String, RunsPost202ResponseValue>> runsBatchPost(@javax.annotation.Nonnull RunsBatchPostRequest runsBatchPostRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = runsBatchPostRequestBuilder(runsBatchPostRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("runsBatchPost", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, RunsPost202ResponseValue>>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Ingest Runs (Batch JSON)
   * Ingests a batch of runs in a single JSON payload. The payload must have &#x60;post&#x60; and/or &#x60;patch&#x60; arrays containing run objects. Prefer this endpoint over single‑run ingestion when submitting hundreds of runs, but &#x60;/runs/multipart&#x60; offers better handling for very large fields and attachments.
   * @param runsBatchPostRequest  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Map&lt;String, RunsPost202ResponseValue&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Map<String, RunsPost202ResponseValue>>> runsBatchPostWithHttpInfo(@javax.annotation.Nonnull RunsBatchPostRequest runsBatchPostRequest) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = runsBatchPostRequestBuilder(runsBatchPostRequest);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("runsBatchPost", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<Map<String, RunsPost202ResponseValue>>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, RunsPost202ResponseValue>>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder runsBatchPostRequestBuilder(@javax.annotation.Nonnull RunsBatchPostRequest runsBatchPostRequest) throws ApiException {
    // verify the required parameter 'runsBatchPostRequest' is set
    if (runsBatchPostRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'runsBatchPostRequest' when calling runsBatchPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/runs/batch";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(runsBatchPostRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Ingest Runs (Multipart)
   * Ingests multiple runs, feedback objects, and binary attachments in a single &#x60;multipart/form-data&#x60; request. **Part‑name pattern**: &#x60;&lt;event&gt;.&lt;run_id&gt;[.&lt;field&gt;]&#x60; where &#x60;event&#x60; ∈ {&#x60;post&#x60;, &#x60;patch&#x60;, &#x60;feedback&#x60;, &#x60;attachment&#x60;}. * &#x60;post|patch.&lt;run_id&gt;&#x60; – JSON run payload. * &#x60;post|patch.&lt;run_id&gt;.&lt;field&gt;&#x60; – out‑of‑band run data (&#x60;inputs&#x60;, &#x60;outputs&#x60;, &#x60;events&#x60;, &#x60;error&#x60;, &#x60;extra&#x60;, &#x60;serialized&#x60;). * &#x60;feedback.&lt;run_id&gt;&#x60; – JSON feedback payload (must include &#x60;trace_id&#x60;). * &#x60;attachment.&lt;run_id&gt;.&lt;filename&gt;&#x60; – arbitrary binary attachment stored in S3. **Headers**: every part must set &#x60;Content-Type&#x60; **and** either a &#x60;Content-Length&#x60; header or &#x60;length&#x60; parameter. Per‑part &#x60;Content-Encoding&#x60; is **not** allowed; the top‑level request may be &#x60;Content-Encoding: zstd&#x60;. **Best performance** for high‑volume ingestion.
   * @param postLeftCurlyBracketRunIdRightCurlyBracket Run to create (JSON) (optional)
   * @param patchLeftCurlyBracketRunIdRightCurlyBracket Run to update (JSON) (optional)
   * @param postLeftCurlyBracketRunIdRightCurlyBracketInputs Large inputs object (JSON) stored out‑of‑band (optional)
   * @param patchLeftCurlyBracketRunIdRightCurlyBracketOutputs Large outputs object (JSON) stored out‑of‑band (optional)
   * @param feedbackLeftCurlyBracketRunIdRightCurlyBracket Feedback object (JSON) – must include trace_id (optional)
   * @param attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket Binary attachment linked to run {run_id} (optional)
   * @return CompletableFuture&lt;Map&lt;String, String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Map<String, String>> runsMultipartPost(@javax.annotation.Nullable File postLeftCurlyBracketRunIdRightCurlyBracket, @javax.annotation.Nullable File patchLeftCurlyBracketRunIdRightCurlyBracket, @javax.annotation.Nullable File postLeftCurlyBracketRunIdRightCurlyBracketInputs, @javax.annotation.Nullable File patchLeftCurlyBracketRunIdRightCurlyBracketOutputs, @javax.annotation.Nullable File feedbackLeftCurlyBracketRunIdRightCurlyBracket, @javax.annotation.Nullable File attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = runsMultipartPostRequestBuilder(postLeftCurlyBracketRunIdRightCurlyBracket, patchLeftCurlyBracketRunIdRightCurlyBracket, postLeftCurlyBracketRunIdRightCurlyBracketInputs, patchLeftCurlyBracketRunIdRightCurlyBracketOutputs, feedbackLeftCurlyBracketRunIdRightCurlyBracket, attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("runsMultipartPost", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, String>>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Ingest Runs (Multipart)
   * Ingests multiple runs, feedback objects, and binary attachments in a single &#x60;multipart/form-data&#x60; request. **Part‑name pattern**: &#x60;&lt;event&gt;.&lt;run_id&gt;[.&lt;field&gt;]&#x60; where &#x60;event&#x60; ∈ {&#x60;post&#x60;, &#x60;patch&#x60;, &#x60;feedback&#x60;, &#x60;attachment&#x60;}. * &#x60;post|patch.&lt;run_id&gt;&#x60; – JSON run payload. * &#x60;post|patch.&lt;run_id&gt;.&lt;field&gt;&#x60; – out‑of‑band run data (&#x60;inputs&#x60;, &#x60;outputs&#x60;, &#x60;events&#x60;, &#x60;error&#x60;, &#x60;extra&#x60;, &#x60;serialized&#x60;). * &#x60;feedback.&lt;run_id&gt;&#x60; – JSON feedback payload (must include &#x60;trace_id&#x60;). * &#x60;attachment.&lt;run_id&gt;.&lt;filename&gt;&#x60; – arbitrary binary attachment stored in S3. **Headers**: every part must set &#x60;Content-Type&#x60; **and** either a &#x60;Content-Length&#x60; header or &#x60;length&#x60; parameter. Per‑part &#x60;Content-Encoding&#x60; is **not** allowed; the top‑level request may be &#x60;Content-Encoding: zstd&#x60;. **Best performance** for high‑volume ingestion.
   * @param postLeftCurlyBracketRunIdRightCurlyBracket Run to create (JSON) (optional)
   * @param patchLeftCurlyBracketRunIdRightCurlyBracket Run to update (JSON) (optional)
   * @param postLeftCurlyBracketRunIdRightCurlyBracketInputs Large inputs object (JSON) stored out‑of‑band (optional)
   * @param patchLeftCurlyBracketRunIdRightCurlyBracketOutputs Large outputs object (JSON) stored out‑of‑band (optional)
   * @param feedbackLeftCurlyBracketRunIdRightCurlyBracket Feedback object (JSON) – must include trace_id (optional)
   * @param attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket Binary attachment linked to run {run_id} (optional)
   * @return CompletableFuture&lt;ApiResponse&lt;Map&lt;String, String&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Map<String, String>>> runsMultipartPostWithHttpInfo(@javax.annotation.Nullable File postLeftCurlyBracketRunIdRightCurlyBracket, @javax.annotation.Nullable File patchLeftCurlyBracketRunIdRightCurlyBracket, @javax.annotation.Nullable File postLeftCurlyBracketRunIdRightCurlyBracketInputs, @javax.annotation.Nullable File patchLeftCurlyBracketRunIdRightCurlyBracketOutputs, @javax.annotation.Nullable File feedbackLeftCurlyBracketRunIdRightCurlyBracket, @javax.annotation.Nullable File attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = runsMultipartPostRequestBuilder(postLeftCurlyBracketRunIdRightCurlyBracket, patchLeftCurlyBracketRunIdRightCurlyBracket, postLeftCurlyBracketRunIdRightCurlyBracketInputs, patchLeftCurlyBracketRunIdRightCurlyBracketOutputs, feedbackLeftCurlyBracketRunIdRightCurlyBracket, attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("runsMultipartPost", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<Map<String, String>>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, String>>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder runsMultipartPostRequestBuilder(@javax.annotation.Nullable File postLeftCurlyBracketRunIdRightCurlyBracket, @javax.annotation.Nullable File patchLeftCurlyBracketRunIdRightCurlyBracket, @javax.annotation.Nullable File postLeftCurlyBracketRunIdRightCurlyBracketInputs, @javax.annotation.Nullable File patchLeftCurlyBracketRunIdRightCurlyBracketOutputs, @javax.annotation.Nullable File feedbackLeftCurlyBracketRunIdRightCurlyBracket, @javax.annotation.Nullable File attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/runs/multipart";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    MultipartEntityBuilder multiPartBuilder = MultipartEntityBuilder.create();
    boolean hasFiles = false;
    multiPartBuilder.addBinaryBody("post.{run_id}", postLeftCurlyBracketRunIdRightCurlyBracket);
    hasFiles = true;
    multiPartBuilder.addBinaryBody("patch.{run_id}", patchLeftCurlyBracketRunIdRightCurlyBracket);
    hasFiles = true;
    multiPartBuilder.addBinaryBody("post.{run_id}.inputs", postLeftCurlyBracketRunIdRightCurlyBracketInputs);
    hasFiles = true;
    multiPartBuilder.addBinaryBody("patch.{run_id}.outputs", patchLeftCurlyBracketRunIdRightCurlyBracketOutputs);
    hasFiles = true;
    multiPartBuilder.addBinaryBody("feedback.{run_id}", feedbackLeftCurlyBracketRunIdRightCurlyBracket);
    hasFiles = true;
    if (attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket != null) {
        multiPartBuilder.addTextBody("attachment.{run_id}.{filename}", attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket.toString());
    }
    HttpEntity entity = multiPartBuilder.build();
    HttpRequest.BodyPublisher formDataPublisher;
    if (hasFiles) {
        Pipe pipe;
        try {
            pipe = Pipe.open();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        new Thread(() -> {
            try (OutputStream outputStream = Channels.newOutputStream(pipe.sink())) {
                entity.writeTo(outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
        formDataPublisher = HttpRequest.BodyPublishers.ofInputStream(() -> Channels.newInputStream(pipe.source()));
    } else {
        ByteArrayOutputStream formOutputStream = new ByteArrayOutputStream();
        try {
            entity.writeTo(formOutputStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        formDataPublisher = HttpRequest.BodyPublishers
            .ofInputStream(() -> new ByteArrayInputStream(formOutputStream.toByteArray()));
    }
    localVarRequestBuilder
        .header("Content-Type", entity.getContentType().getValue())
        .method("POST", formDataPublisher);
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Run
   * Queues a single run for ingestion. The request body must be a JSON-encoded run object that follows the Run schema.
   * @param runsRun  (required)
   * @return CompletableFuture&lt;Map&lt;String, RunsPost202ResponseValue&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Map<String, RunsPost202ResponseValue>> runsPost(@javax.annotation.Nonnull RunsRun runsRun) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = runsPostRequestBuilder(runsRun);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("runsPost", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, RunsPost202ResponseValue>>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Create a Run
   * Queues a single run for ingestion. The request body must be a JSON-encoded run object that follows the Run schema.
   * @param runsRun  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Map&lt;String, RunsPost202ResponseValue&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Map<String, RunsPost202ResponseValue>>> runsPostWithHttpInfo(@javax.annotation.Nonnull RunsRun runsRun) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = runsPostRequestBuilder(runsRun);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("runsPost", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<Map<String, RunsPost202ResponseValue>>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, RunsPost202ResponseValue>>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder runsPostRequestBuilder(@javax.annotation.Nonnull RunsRun runsRun) throws ApiException {
    // verify the required parameter 'runsRun' is set
    if (runsRun == null) {
      throw new ApiException(400, "Missing the required parameter 'runsRun' when calling runsPost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/runs";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(runsRun);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Run
   * Updates a run identified by its ID. The body should contain only the fields to be changed; unknown fields are ignored.
   * @param UNKNOWN_PARAMETER_NAME Run ID (required)
   * @param runsRun  (required)
   * @return CompletableFuture&lt;Map&lt;String, RunsPost202ResponseValue&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Map<String, RunsPost202ResponseValue>> runsRunIdPatch(@javax.annotation.Nonnull  String runId, @javax.annotation.Nonnull RunsRun runsRun) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = runsRunIdPatchRequestBuilder(runId, runsRun);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("runsRunIdPatch", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, RunsPost202ResponseValue>>() {})
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
      });
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  /**
   * Update a Run
   * Updates a run identified by its ID. The body should contain only the fields to be changed; unknown fields are ignored.
   * @param UNKNOWN_PARAMETER_NAME Run ID (required)
   * @param runsRun  (required)
   * @return CompletableFuture&lt;ApiResponse&lt;Map&lt;String, RunsPost202ResponseValue&gt;&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ApiResponse<Map<String, RunsPost202ResponseValue>>> runsRunIdPatchWithHttpInfo(@javax.annotation.Nonnull  String runId, @javax.annotation.Nonnull RunsRun runsRun) throws ApiException {
    try {
      HttpRequest.Builder localVarRequestBuilder = runsRunIdPatchRequestBuilder(runId, runsRun);
      return memberVarHttpClient.sendAsync(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
            if (memberVarAsyncResponseInterceptor != null) {
              memberVarAsyncResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(getApiException("runsRunIdPatch", localVarResponse));
            }
            try {
              String responseBody = localVarResponse.body();
              return CompletableFuture.completedFuture(
                  new ApiResponse<Map<String, RunsPost202ResponseValue>>(
                      localVarResponse.statusCode(),
                      localVarResponse.headers().map(),
                      responseBody == null || responseBody.isBlank() ? null : memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, RunsPost202ResponseValue>>() {}))
              );
            } catch (IOException e) {
              return CompletableFuture.failedFuture(new ApiException(e));
            }
        }
      );
    }
    catch (ApiException e) {
      return CompletableFuture.failedFuture(e);
    }
  }

  private HttpRequest.Builder runsRunIdPatchRequestBuilder(@javax.annotation.Nonnull  String runId, @javax.annotation.Nonnull RunsRun runsRun) throws ApiException {
    // verify the required parameter 'UNKNOWN_PARAMETER_NAME' is set
    if (runId == null) {
      throw new ApiException(400, "Missing the required parameter 'UNKNOWN_PARAMETER_NAME' when calling runsRunIdPatch");
    }
    // verify the required parameter 'runsRun' is set
    if (runsRun == null) {
      throw new ApiException(400, "Missing the required parameter 'runsRun' when calling runsRunIdPatch");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/runs/{run_id}"
        .replace("{run_id}", ApiClient.urlEncode(runId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(runsRun);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
