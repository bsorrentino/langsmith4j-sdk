/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * Highlight
 */
@JsonPropertyOrder({
  Highlight.JSON_PROPERTY_PROMPT_CHUNK_START_INDEX,
  Highlight.JSON_PROPERTY_PROMPT_CHUNK_END_INDEX,
  Highlight.JSON_PROPERTY_PROMPT_CHUNK,
  Highlight.JSON_PROPERTY_HIGHLIGHT_TEXT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class Highlight {
  public static final String JSON_PROPERTY_PROMPT_CHUNK_START_INDEX = "prompt_chunk_start_index";
  @javax.annotation.Nonnull
  private Integer promptChunkStartIndex;

  public static final String JSON_PROPERTY_PROMPT_CHUNK_END_INDEX = "prompt_chunk_end_index";
  @javax.annotation.Nonnull
  private Integer promptChunkEndIndex;

  public static final String JSON_PROPERTY_PROMPT_CHUNK = "prompt_chunk";
  @javax.annotation.Nonnull
  private String promptChunk;

  public static final String JSON_PROPERTY_HIGHLIGHT_TEXT = "highlight_text";
  @javax.annotation.Nonnull
  private String highlightText;

  public Highlight() { 
  }

  public Highlight promptChunkStartIndex(@javax.annotation.Nonnull Integer promptChunkStartIndex) {
    this.promptChunkStartIndex = promptChunkStartIndex;
    return this;
  }

  /**
   * Get promptChunkStartIndex
   * @return promptChunkStartIndex
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROMPT_CHUNK_START_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getPromptChunkStartIndex() {
    return promptChunkStartIndex;
  }


  @JsonProperty(JSON_PROPERTY_PROMPT_CHUNK_START_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPromptChunkStartIndex(@javax.annotation.Nonnull Integer promptChunkStartIndex) {
    this.promptChunkStartIndex = promptChunkStartIndex;
  }


  public Highlight promptChunkEndIndex(@javax.annotation.Nonnull Integer promptChunkEndIndex) {
    this.promptChunkEndIndex = promptChunkEndIndex;
    return this;
  }

  /**
   * Get promptChunkEndIndex
   * @return promptChunkEndIndex
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROMPT_CHUNK_END_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getPromptChunkEndIndex() {
    return promptChunkEndIndex;
  }


  @JsonProperty(JSON_PROPERTY_PROMPT_CHUNK_END_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPromptChunkEndIndex(@javax.annotation.Nonnull Integer promptChunkEndIndex) {
    this.promptChunkEndIndex = promptChunkEndIndex;
  }


  public Highlight promptChunk(@javax.annotation.Nonnull String promptChunk) {
    this.promptChunk = promptChunk;
    return this;
  }

  /**
   * Get promptChunk
   * @return promptChunk
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROMPT_CHUNK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPromptChunk() {
    return promptChunk;
  }


  @JsonProperty(JSON_PROPERTY_PROMPT_CHUNK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPromptChunk(@javax.annotation.Nonnull String promptChunk) {
    this.promptChunk = promptChunk;
  }


  public Highlight highlightText(@javax.annotation.Nonnull String highlightText) {
    this.highlightText = highlightText;
    return this;
  }

  /**
   * Get highlightText
   * @return highlightText
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HIGHLIGHT_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getHighlightText() {
    return highlightText;
  }


  @JsonProperty(JSON_PROPERTY_HIGHLIGHT_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHighlightText(@javax.annotation.Nonnull String highlightText) {
    this.highlightText = highlightText;
  }


  /**
   * Return true if this Highlight object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Highlight highlight = (Highlight) o;
    return Objects.equals(this.promptChunkStartIndex, highlight.promptChunkStartIndex) &&
        Objects.equals(this.promptChunkEndIndex, highlight.promptChunkEndIndex) &&
        Objects.equals(this.promptChunk, highlight.promptChunk) &&
        Objects.equals(this.highlightText, highlight.highlightText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(promptChunkStartIndex, promptChunkEndIndex, promptChunk, highlightText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Highlight {\n");
    sb.append("    promptChunkStartIndex: ").append(toIndentedString(promptChunkStartIndex)).append("\n");
    sb.append("    promptChunkEndIndex: ").append(toIndentedString(promptChunkEndIndex)).append("\n");
    sb.append("    promptChunk: ").append(toIndentedString(promptChunk)).append("\n");
    sb.append("    highlightText: ").append(toIndentedString(highlightText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `prompt_chunk_start_index` to the URL query string
    if (getPromptChunkStartIndex() != null) {
      joiner.add(String.format("%sprompt_chunk_start_index%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPromptChunkStartIndex()))));
    }

    // add `prompt_chunk_end_index` to the URL query string
    if (getPromptChunkEndIndex() != null) {
      joiner.add(String.format("%sprompt_chunk_end_index%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPromptChunkEndIndex()))));
    }

    // add `prompt_chunk` to the URL query string
    if (getPromptChunk() != null) {
      joiner.add(String.format("%sprompt_chunk%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getPromptChunk()))));
    }

    // add `highlight_text` to the URL query string
    if (getHighlightText() != null) {
      joiner.add(String.format("%shighlight_text%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getHighlightText()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private Highlight instance;

    public Builder() {
      this(new Highlight());
    }

    protected Builder(Highlight instance) {
      this.instance = instance;
    }

    public Highlight.Builder promptChunkStartIndex(Integer promptChunkStartIndex) {
      this.instance.promptChunkStartIndex = promptChunkStartIndex;
      return this;
    }
    public Highlight.Builder promptChunkEndIndex(Integer promptChunkEndIndex) {
      this.instance.promptChunkEndIndex = promptChunkEndIndex;
      return this;
    }
    public Highlight.Builder promptChunk(String promptChunk) {
      this.instance.promptChunk = promptChunk;
      return this;
    }
    public Highlight.Builder highlightText(String highlightText) {
      this.instance.highlightText = highlightText;
      return this;
    }


    /**
    * returns a built Highlight instance.
    *
    * The builder is not reusable.
    */
    public Highlight build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static Highlight.Builder builder() {
    return new Highlight.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public Highlight.Builder toBuilder() {
    return new Highlight.Builder()
      .promptChunkStartIndex(getPromptChunkStartIndex())
      .promptChunkEndIndex(getPromptChunkEndIndex())
      .promptChunk(getPromptChunk())
      .highlightText(getHighlightText());
  }

}

