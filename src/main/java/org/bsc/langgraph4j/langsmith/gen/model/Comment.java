/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * Comment
 */
@JsonPropertyOrder({
  Comment.JSON_PROPERTY_ID,
  Comment.JSON_PROPERTY_COMMENT_BY,
  Comment.JSON_PROPERTY_COMMENT_ON,
  Comment.JSON_PROPERTY_PARENT_ID,
  Comment.JSON_PROPERTY_CONTENT,
  Comment.JSON_PROPERTY_CREATED_AT,
  Comment.JSON_PROPERTY_UPDATED_AT,
  Comment.JSON_PROPERTY_COMMENT_BY_NAME,
  Comment.JSON_PROPERTY_NUM_SUB_COMMENTS,
  Comment.JSON_PROPERTY_NUM_LIKES,
  Comment.JSON_PROPERTY_LIKED_BY_AUTH_USER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class Comment {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private UUID id;

  public static final String JSON_PROPERTY_COMMENT_BY = "comment_by";
  private JsonNullable<UUID> commentBy = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_COMMENT_ON = "comment_on";
  @javax.annotation.Nonnull
  private UUID commentOn;

  public static final String JSON_PROPERTY_PARENT_ID = "parent_id";
  private JsonNullable<UUID> parentId = JsonNullable.<UUID>undefined();

  public static final String JSON_PROPERTY_CONTENT = "content";
  @javax.annotation.Nonnull
  private String content;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_COMMENT_BY_NAME = "comment_by_name";
  private JsonNullable<String> commentByName = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_NUM_SUB_COMMENTS = "num_sub_comments";
  @javax.annotation.Nonnull
  private Integer numSubComments;

  public static final String JSON_PROPERTY_NUM_LIKES = "num_likes";
  @javax.annotation.Nonnull
  private Integer numLikes;

  public static final String JSON_PROPERTY_LIKED_BY_AUTH_USER = "liked_by_auth_user";
  private JsonNullable<Boolean> likedByAuthUser = JsonNullable.<Boolean>undefined();

  public Comment() { 
  }

  public Comment id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public Comment commentBy(@javax.annotation.Nullable UUID commentBy) {
    this.commentBy = JsonNullable.<UUID>of(commentBy);
    return this;
  }

  /**
   * Get commentBy
   * @return commentBy
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public UUID getCommentBy() {
        return commentBy.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMMENT_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getCommentBy_JsonNullable() {
    return commentBy;
  }
  
  @JsonProperty(JSON_PROPERTY_COMMENT_BY)
  public void setCommentBy_JsonNullable(JsonNullable<UUID> commentBy) {
    this.commentBy = commentBy;
  }

  public void setCommentBy(@javax.annotation.Nullable UUID commentBy) {
    this.commentBy = JsonNullable.<UUID>of(commentBy);
  }


  public Comment commentOn(@javax.annotation.Nonnull UUID commentOn) {
    this.commentOn = commentOn;
    return this;
  }

  /**
   * Get commentOn
   * @return commentOn
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMMENT_ON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public UUID getCommentOn() {
    return commentOn;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT_ON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCommentOn(@javax.annotation.Nonnull UUID commentOn) {
    this.commentOn = commentOn;
  }


  public Comment parentId(@javax.annotation.Nullable UUID parentId) {
    this.parentId = JsonNullable.<UUID>of(parentId);
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public UUID getParentId() {
        return parentId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<UUID> getParentId_JsonNullable() {
    return parentId;
  }
  
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  public void setParentId_JsonNullable(JsonNullable<UUID> parentId) {
    this.parentId = parentId;
  }

  public void setParentId(@javax.annotation.Nullable UUID parentId) {
    this.parentId = JsonNullable.<UUID>of(parentId);
  }


  public Comment content(@javax.annotation.Nonnull String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getContent() {
    return content;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContent(@javax.annotation.Nonnull String content) {
    this.content = content;
  }


  public Comment createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Comment updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Comment commentByName(@javax.annotation.Nullable String commentByName) {
    this.commentByName = JsonNullable.<String>of(commentByName);
    return this;
  }

  /**
   * Get commentByName
   * @return commentByName
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getCommentByName() {
        return commentByName.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMMENT_BY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCommentByName_JsonNullable() {
    return commentByName;
  }
  
  @JsonProperty(JSON_PROPERTY_COMMENT_BY_NAME)
  public void setCommentByName_JsonNullable(JsonNullable<String> commentByName) {
    this.commentByName = commentByName;
  }

  public void setCommentByName(@javax.annotation.Nullable String commentByName) {
    this.commentByName = JsonNullable.<String>of(commentByName);
  }


  public Comment numSubComments(@javax.annotation.Nonnull Integer numSubComments) {
    this.numSubComments = numSubComments;
    return this;
  }

  /**
   * Get numSubComments
   * @return numSubComments
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUM_SUB_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getNumSubComments() {
    return numSubComments;
  }


  @JsonProperty(JSON_PROPERTY_NUM_SUB_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumSubComments(@javax.annotation.Nonnull Integer numSubComments) {
    this.numSubComments = numSubComments;
  }


  public Comment numLikes(@javax.annotation.Nonnull Integer numLikes) {
    this.numLikes = numLikes;
    return this;
  }

  /**
   * Get numLikes
   * @return numLikes
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUM_LIKES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getNumLikes() {
    return numLikes;
  }


  @JsonProperty(JSON_PROPERTY_NUM_LIKES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumLikes(@javax.annotation.Nonnull Integer numLikes) {
    this.numLikes = numLikes;
  }


  public Comment likedByAuthUser(@javax.annotation.Nullable Boolean likedByAuthUser) {
    this.likedByAuthUser = JsonNullable.<Boolean>of(likedByAuthUser);
    return this;
  }

  /**
   * Get likedByAuthUser
   * @return likedByAuthUser
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Boolean getLikedByAuthUser() {
        return likedByAuthUser.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LIKED_BY_AUTH_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getLikedByAuthUser_JsonNullable() {
    return likedByAuthUser;
  }
  
  @JsonProperty(JSON_PROPERTY_LIKED_BY_AUTH_USER)
  public void setLikedByAuthUser_JsonNullable(JsonNullable<Boolean> likedByAuthUser) {
    this.likedByAuthUser = likedByAuthUser;
  }

  public void setLikedByAuthUser(@javax.annotation.Nullable Boolean likedByAuthUser) {
    this.likedByAuthUser = JsonNullable.<Boolean>of(likedByAuthUser);
  }


  /**
   * Return true if this Comment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Comment comment = (Comment) o;
    return Objects.equals(this.id, comment.id) &&
        equalsNullable(this.commentBy, comment.commentBy) &&
        Objects.equals(this.commentOn, comment.commentOn) &&
        equalsNullable(this.parentId, comment.parentId) &&
        Objects.equals(this.content, comment.content) &&
        Objects.equals(this.createdAt, comment.createdAt) &&
        Objects.equals(this.updatedAt, comment.updatedAt) &&
        equalsNullable(this.commentByName, comment.commentByName) &&
        Objects.equals(this.numSubComments, comment.numSubComments) &&
        Objects.equals(this.numLikes, comment.numLikes) &&
        equalsNullable(this.likedByAuthUser, comment.likedByAuthUser);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hashCodeNullable(commentBy), commentOn, hashCodeNullable(parentId), content, createdAt, updatedAt, hashCodeNullable(commentByName), numSubComments, numLikes, hashCodeNullable(likedByAuthUser));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Comment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    commentBy: ").append(toIndentedString(commentBy)).append("\n");
    sb.append("    commentOn: ").append(toIndentedString(commentOn)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    commentByName: ").append(toIndentedString(commentByName)).append("\n");
    sb.append("    numSubComments: ").append(toIndentedString(numSubComments)).append("\n");
    sb.append("    numLikes: ").append(toIndentedString(numLikes)).append("\n");
    sb.append("    likedByAuthUser: ").append(toIndentedString(likedByAuthUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `comment_by` to the URL query string
    if (getCommentBy() != null) {
      joiner.add(String.format("%scomment_by%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCommentBy()))));
    }

    // add `comment_on` to the URL query string
    if (getCommentOn() != null) {
      joiner.add(String.format("%scomment_on%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCommentOn()))));
    }

    // add `parent_id` to the URL query string
    if (getParentId() != null) {
      joiner.add(String.format("%sparent_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getParentId()))));
    }

    // add `content` to the URL query string
    if (getContent() != null) {
      joiner.add(String.format("%scontent%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getContent()))));
    }

    // add `created_at` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%screated_at%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCreatedAt()))));
    }

    // add `updated_at` to the URL query string
    if (getUpdatedAt() != null) {
      joiner.add(String.format("%supdated_at%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUpdatedAt()))));
    }

    // add `comment_by_name` to the URL query string
    if (getCommentByName() != null) {
      joiner.add(String.format("%scomment_by_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCommentByName()))));
    }

    // add `num_sub_comments` to the URL query string
    if (getNumSubComments() != null) {
      joiner.add(String.format("%snum_sub_comments%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNumSubComments()))));
    }

    // add `num_likes` to the URL query string
    if (getNumLikes() != null) {
      joiner.add(String.format("%snum_likes%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNumLikes()))));
    }

    // add `liked_by_auth_user` to the URL query string
    if (getLikedByAuthUser() != null) {
      joiner.add(String.format("%sliked_by_auth_user%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getLikedByAuthUser()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private Comment instance;

    public Builder() {
      this(new Comment());
    }

    protected Builder(Comment instance) {
      this.instance = instance;
    }

    public Comment.Builder id(UUID id) {
      this.instance.id = id;
      return this;
    }
    public Comment.Builder commentBy(UUID commentBy) {
      this.instance.commentBy = JsonNullable.<UUID>of(commentBy);
      return this;
    }
    public Comment.Builder commentBy(JsonNullable<UUID> commentBy) {
      this.instance.commentBy = commentBy;
      return this;
    }
    public Comment.Builder commentOn(UUID commentOn) {
      this.instance.commentOn = commentOn;
      return this;
    }
    public Comment.Builder parentId(UUID parentId) {
      this.instance.parentId = JsonNullable.<UUID>of(parentId);
      return this;
    }
    public Comment.Builder parentId(JsonNullable<UUID> parentId) {
      this.instance.parentId = parentId;
      return this;
    }
    public Comment.Builder content(String content) {
      this.instance.content = content;
      return this;
    }
    public Comment.Builder createdAt(OffsetDateTime createdAt) {
      this.instance.createdAt = createdAt;
      return this;
    }
    public Comment.Builder updatedAt(OffsetDateTime updatedAt) {
      this.instance.updatedAt = updatedAt;
      return this;
    }
    public Comment.Builder commentByName(String commentByName) {
      this.instance.commentByName = JsonNullable.<String>of(commentByName);
      return this;
    }
    public Comment.Builder commentByName(JsonNullable<String> commentByName) {
      this.instance.commentByName = commentByName;
      return this;
    }
    public Comment.Builder numSubComments(Integer numSubComments) {
      this.instance.numSubComments = numSubComments;
      return this;
    }
    public Comment.Builder numLikes(Integer numLikes) {
      this.instance.numLikes = numLikes;
      return this;
    }
    public Comment.Builder likedByAuthUser(Boolean likedByAuthUser) {
      this.instance.likedByAuthUser = JsonNullable.<Boolean>of(likedByAuthUser);
      return this;
    }
    public Comment.Builder likedByAuthUser(JsonNullable<Boolean> likedByAuthUser) {
      this.instance.likedByAuthUser = likedByAuthUser;
      return this;
    }


    /**
    * returns a built Comment instance.
    *
    * The builder is not reusable.
    */
    public Comment build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static Comment.Builder builder() {
    return new Comment.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public Comment.Builder toBuilder() {
    return new Comment.Builder()
      .id(getId())
      .commentBy(getCommentBy())
      .commentOn(getCommentOn())
      .parentId(getParentId())
      .content(getContent())
      .createdAt(getCreatedAt())
      .updatedAt(getUpdatedAt())
      .commentByName(getCommentByName())
      .numSubComments(getNumSubComments())
      .numLikes(getNumLikes())
      .likedByAuthUser(getLikedByAuthUser());
  }

}

