/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.bsc.langgraph4j.langsmith.gen.model.Content;
import org.bsc.langgraph4j.langsmith.gen.model.Id;
import org.bsc.langgraph4j.langsmith.gen.model.Name2;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * Tool Message chunk.
 */
@JsonPropertyOrder({
  ToolMessageChunk.JSON_PROPERTY_CONTENT,
  ToolMessageChunk.JSON_PROPERTY_ADDITIONAL_KWARGS,
  ToolMessageChunk.JSON_PROPERTY_RESPONSE_METADATA,
  ToolMessageChunk.JSON_PROPERTY_TYPE,
  ToolMessageChunk.JSON_PROPERTY_NAME,
  ToolMessageChunk.JSON_PROPERTY_ID,
  ToolMessageChunk.JSON_PROPERTY_TOOL_CALL_ID,
  ToolMessageChunk.JSON_PROPERTY_ARTIFACT,
  ToolMessageChunk.JSON_PROPERTY_STATUS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class ToolMessageChunk extends HashMap<String, Object> {
  public static final String JSON_PROPERTY_CONTENT = "content";
  @javax.annotation.Nonnull
  private Content content;

  public static final String JSON_PROPERTY_ADDITIONAL_KWARGS = "additional_kwargs";
  @javax.annotation.Nullable
  private Object additionalKwargs;

  public static final String JSON_PROPERTY_RESPONSE_METADATA = "response_metadata";
  @javax.annotation.Nullable
  private Object responseMetadata;

  public static final String JSON_PROPERTY_TYPE = "type";
  @javax.annotation.Nullable
  private String type = "ToolMessageChunk";

  public static final String JSON_PROPERTY_NAME = "name";
  @javax.annotation.Nullable
  private Name2 name;

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private Id id;

  public static final String JSON_PROPERTY_TOOL_CALL_ID = "tool_call_id";
  @javax.annotation.Nonnull
  private String toolCallId;

  public static final String JSON_PROPERTY_ARTIFACT = "artifact";
  private JsonNullable<Object> artifact = JsonNullable.<Object>of(null);

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    SUCCESS(String.valueOf("success")),
    
    ERROR(String.valueOf("error"));

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  @javax.annotation.Nullable
  private StatusEnum status = StatusEnum.SUCCESS;

  public ToolMessageChunk() { 
  }

  public ToolMessageChunk content(@javax.annotation.Nonnull Content content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Content getContent() {
    return content;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContent(@javax.annotation.Nonnull Content content) {
    this.content = content;
  }


  public ToolMessageChunk additionalKwargs(@javax.annotation.Nullable Object additionalKwargs) {
    this.additionalKwargs = additionalKwargs;
    return this;
  }

  /**
   * Get additionalKwargs
   * @return additionalKwargs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_KWARGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getAdditionalKwargs() {
    return additionalKwargs;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_KWARGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalKwargs(@javax.annotation.Nullable Object additionalKwargs) {
    this.additionalKwargs = additionalKwargs;
  }


  public ToolMessageChunk responseMetadata(@javax.annotation.Nullable Object responseMetadata) {
    this.responseMetadata = responseMetadata;
    return this;
  }

  /**
   * Get responseMetadata
   * @return responseMetadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getResponseMetadata() {
    return responseMetadata;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseMetadata(@javax.annotation.Nullable Object responseMetadata) {
    this.responseMetadata = responseMetadata;
  }


  public ToolMessageChunk type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public ToolMessageChunk name(@javax.annotation.Nullable Name2 name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Name2 getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@javax.annotation.Nullable Name2 name) {
    this.name = name;
  }


  public ToolMessageChunk id(@javax.annotation.Nullable Id id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Id getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@javax.annotation.Nullable Id id) {
    this.id = id;
  }


  public ToolMessageChunk toolCallId(@javax.annotation.Nonnull String toolCallId) {
    this.toolCallId = toolCallId;
    return this;
  }

  /**
   * Get toolCallId
   * @return toolCallId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getToolCallId() {
    return toolCallId;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CALL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToolCallId(@javax.annotation.Nonnull String toolCallId) {
    this.toolCallId = toolCallId;
  }


  public ToolMessageChunk artifact(@javax.annotation.Nullable Object artifact) {
    this.artifact = JsonNullable.<Object>of(artifact);
    return this;
  }

  /**
   * Get artifact
   * @return artifact
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public Object getArtifact() {
        return artifact.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ARTIFACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getArtifact_JsonNullable() {
    return artifact;
  }
  
  @JsonProperty(JSON_PROPERTY_ARTIFACT)
  public void setArtifact_JsonNullable(JsonNullable<Object> artifact) {
    this.artifact = artifact;
  }

  public void setArtifact(@javax.annotation.Nullable Object artifact) {
    this.artifact = JsonNullable.<Object>of(artifact);
  }


  public ToolMessageChunk status(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(@javax.annotation.Nullable StatusEnum status) {
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   * @param key the name of the property
   * @param value the value of the property
   * @return self reference
   */
  @JsonAnySetter
  public ToolMessageChunk putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) properties.
   * @return the additional (undeclared) properties
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   * @param key the name of the property
   * @return the additional (undeclared) property with the specified name
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }

  /**
   * Return true if this ToolMessageChunk object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ToolMessageChunk toolMessageChunk = (ToolMessageChunk) o;
    return Objects.equals(this.content, toolMessageChunk.content) &&
        Objects.equals(this.additionalKwargs, toolMessageChunk.additionalKwargs) &&
        Objects.equals(this.responseMetadata, toolMessageChunk.responseMetadata) &&
        Objects.equals(this.type, toolMessageChunk.type) &&
        Objects.equals(this.name, toolMessageChunk.name) &&
        Objects.equals(this.id, toolMessageChunk.id) &&
        Objects.equals(this.toolCallId, toolMessageChunk.toolCallId) &&
        equalsNullable(this.artifact, toolMessageChunk.artifact) &&
        Objects.equals(this.status, toolMessageChunk.status)&&
        Objects.equals(this.additionalProperties, toolMessageChunk.additionalProperties) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, additionalKwargs, responseMetadata, type, name, id, toolCallId, hashCodeNullable(artifact), status, super.hashCode(), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ToolMessageChunk {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    additionalKwargs: ").append(toIndentedString(additionalKwargs)).append("\n");
    sb.append("    responseMetadata: ").append(toIndentedString(responseMetadata)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    toolCallId: ").append(toIndentedString(toolCallId)).append("\n");
    sb.append("    artifact: ").append(toIndentedString(artifact)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `content` to the URL query string
    if (getContent() != null) {
      joiner.add(getContent().toUrlQueryString(prefix + "content" + suffix));
    }

    // add `additional_kwargs` to the URL query string
    if (getAdditionalKwargs() != null) {
      joiner.add(String.format("%sadditional_kwargs%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAdditionalKwargs()))));
    }

    // add `response_metadata` to the URL query string
    if (getResponseMetadata() != null) {
      joiner.add(String.format("%sresponse_metadata%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getResponseMetadata()))));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getType()))));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(getName().toUrlQueryString(prefix + "name" + suffix));
    }

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(getId().toUrlQueryString(prefix + "id" + suffix));
    }

    // add `tool_call_id` to the URL query string
    if (getToolCallId() != null) {
      joiner.add(String.format("%stool_call_id%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getToolCallId()))));
    }

    // add `artifact` to the URL query string
    if (getArtifact() != null) {
      joiner.add(String.format("%sartifact%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getArtifact()))));
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sstatus%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private ToolMessageChunk instance;

    public Builder() {
      this(new ToolMessageChunk());
    }

    protected Builder(ToolMessageChunk instance) {
      this.instance = instance;
    }

    public ToolMessageChunk.Builder content(Content content) {
      this.instance.content = content;
      return this;
    }
    public ToolMessageChunk.Builder additionalKwargs(Object additionalKwargs) {
      this.instance.additionalKwargs = additionalKwargs;
      return this;
    }
    public ToolMessageChunk.Builder responseMetadata(Object responseMetadata) {
      this.instance.responseMetadata = responseMetadata;
      return this;
    }
    public ToolMessageChunk.Builder type(String type) {
      this.instance.type = type;
      return this;
    }
    public ToolMessageChunk.Builder name(Name2 name) {
      this.instance.name = name;
      return this;
    }
    public ToolMessageChunk.Builder id(Id id) {
      this.instance.id = id;
      return this;
    }
    public ToolMessageChunk.Builder toolCallId(String toolCallId) {
      this.instance.toolCallId = toolCallId;
      return this;
    }
    public ToolMessageChunk.Builder artifact(Object artifact) {
      this.instance.artifact = JsonNullable.<Object>of(artifact);
      return this;
    }
    public ToolMessageChunk.Builder artifact(JsonNullable<Object> artifact) {
      this.instance.artifact = artifact;
      return this;
    }
    public ToolMessageChunk.Builder status(StatusEnum status) {
      this.instance.status = status;
      return this;
    }


    /**
    * returns a built ToolMessageChunk instance.
    *
    * The builder is not reusable.
    */
    public ToolMessageChunk build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static ToolMessageChunk.Builder builder() {
    return new ToolMessageChunk.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public ToolMessageChunk.Builder toBuilder() {
    return new ToolMessageChunk.Builder()
      .content(getContent())
      .additionalKwargs(getAdditionalKwargs())
      .responseMetadata(getResponseMetadata())
      .type(getType())
      .name(getName())
      .id(getId())
      .toolCallId(getToolCallId())
      .artifact(getArtifact())
      .status(getStatus());
  }

}

