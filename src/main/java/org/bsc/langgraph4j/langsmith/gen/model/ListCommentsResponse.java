/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.bsc.langgraph4j.langsmith.gen.model.Comment;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * ListCommentsResponse
 */
@JsonPropertyOrder({
  ListCommentsResponse.JSON_PROPERTY_COMMENTS,
  ListCommentsResponse.JSON_PROPERTY_TOTAL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class ListCommentsResponse {
  public static final String JSON_PROPERTY_COMMENTS = "comments";
  @javax.annotation.Nonnull
  private List<Comment> comments = new ArrayList<>();

  public static final String JSON_PROPERTY_TOTAL = "total";
  @javax.annotation.Nonnull
  private Integer total;

  public ListCommentsResponse() { 
  }

  public ListCommentsResponse comments(@javax.annotation.Nonnull List<Comment> comments) {
    this.comments = comments;
    return this;
  }

  public ListCommentsResponse addCommentsItem(Comment commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<>();
    }
    this.comments.add(commentsItem);
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<Comment> getComments() {
    return comments;
  }


  @JsonProperty(JSON_PROPERTY_COMMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setComments(@javax.annotation.Nonnull List<Comment> comments) {
    this.comments = comments;
  }


  public ListCommentsResponse total(@javax.annotation.Nonnull Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotal(@javax.annotation.Nonnull Integer total) {
    this.total = total;
  }


  /**
   * Return true if this ListCommentsResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListCommentsResponse listCommentsResponse = (ListCommentsResponse) o;
    return Objects.equals(this.comments, listCommentsResponse.comments) &&
        Objects.equals(this.total, listCommentsResponse.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListCommentsResponse {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `comments` to the URL query string
    if (getComments() != null) {
      for (int i = 0; i < getComments().size(); i++) {
        if (getComments().get(i) != null) {
          joiner.add(getComments().get(i).toUrlQueryString(String.format("%scomments%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `total` to the URL query string
    if (getTotal() != null) {
      joiner.add(String.format("%stotal%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTotal()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private ListCommentsResponse instance;

    public Builder() {
      this(new ListCommentsResponse());
    }

    protected Builder(ListCommentsResponse instance) {
      this.instance = instance;
    }

    public ListCommentsResponse.Builder comments(List<Comment> comments) {
      this.instance.comments = comments;
      return this;
    }
    public ListCommentsResponse.Builder total(Integer total) {
      this.instance.total = total;
      return this;
    }


    /**
    * returns a built ListCommentsResponse instance.
    *
    * The builder is not reusable.
    */
    public ListCommentsResponse build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static ListCommentsResponse.Builder builder() {
    return new ListCommentsResponse.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public ListCommentsResponse.Builder toBuilder() {
    return new ListCommentsResponse.Builder()
      .comments(getComments())
      .total(getTotal());
  }

}

