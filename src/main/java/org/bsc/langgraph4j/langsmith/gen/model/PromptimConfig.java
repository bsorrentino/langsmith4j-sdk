/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import org.bsc.langgraph4j.langsmith.gen.ApiClient;
/**
 * PromptimConfig
 */
@JsonPropertyOrder({
  PromptimConfig.JSON_PROPERTY_MESSAGE_INDEX,
  PromptimConfig.JSON_PROPERTY_TASK_DESCRIPTION,
  PromptimConfig.JSON_PROPERTY_DATASET_NAME,
  PromptimConfig.JSON_PROPERTY_TRAIN_SPLIT,
  PromptimConfig.JSON_PROPERTY_DEV_SPLIT,
  PromptimConfig.JSON_PROPERTY_TEST_SPLIT,
  PromptimConfig.JSON_PROPERTY_EVALUATORS,
  PromptimConfig.JSON_PROPERTY_NUM_EPOCHS,
  PromptimConfig.JSON_PROPERTY_AUTO_COMMIT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-17T23:27:07.599378+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class PromptimConfig {
  public static final String JSON_PROPERTY_MESSAGE_INDEX = "message_index";
  @javax.annotation.Nonnull
  private Integer messageIndex;

  public static final String JSON_PROPERTY_TASK_DESCRIPTION = "task_description";
  @javax.annotation.Nonnull
  private String taskDescription;

  public static final String JSON_PROPERTY_DATASET_NAME = "dataset_name";
  @javax.annotation.Nonnull
  private String datasetName;

  public static final String JSON_PROPERTY_TRAIN_SPLIT = "train_split";
  @javax.annotation.Nullable
  private String trainSplit;

  public static final String JSON_PROPERTY_DEV_SPLIT = "dev_split";
  @javax.annotation.Nullable
  private String devSplit;

  public static final String JSON_PROPERTY_TEST_SPLIT = "test_split";
  @javax.annotation.Nullable
  private String testSplit;

  public static final String JSON_PROPERTY_EVALUATORS = "evaluators";
  @javax.annotation.Nonnull
  private List<UUID> evaluators = new ArrayList<>();

  public static final String JSON_PROPERTY_NUM_EPOCHS = "num_epochs";
  @javax.annotation.Nonnull
  private Integer numEpochs;

  public static final String JSON_PROPERTY_AUTO_COMMIT = "auto_commit";
  @javax.annotation.Nonnull
  private Boolean autoCommit;

  public PromptimConfig() { 
  }

  public PromptimConfig messageIndex(@javax.annotation.Nonnull Integer messageIndex) {
    this.messageIndex = messageIndex;
    return this;
  }

  /**
   * Get messageIndex
   * @return messageIndex
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getMessageIndex() {
    return messageIndex;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE_INDEX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessageIndex(@javax.annotation.Nonnull Integer messageIndex) {
    this.messageIndex = messageIndex;
  }


  public PromptimConfig taskDescription(@javax.annotation.Nonnull String taskDescription) {
    this.taskDescription = taskDescription;
    return this;
  }

  /**
   * Get taskDescription
   * @return taskDescription
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TASK_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTaskDescription() {
    return taskDescription;
  }


  @JsonProperty(JSON_PROPERTY_TASK_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTaskDescription(@javax.annotation.Nonnull String taskDescription) {
    this.taskDescription = taskDescription;
  }


  public PromptimConfig datasetName(@javax.annotation.Nonnull String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

  /**
   * Get datasetName
   * @return datasetName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATASET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getDatasetName() {
    return datasetName;
  }


  @JsonProperty(JSON_PROPERTY_DATASET_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDatasetName(@javax.annotation.Nonnull String datasetName) {
    this.datasetName = datasetName;
  }


  public PromptimConfig trainSplit(@javax.annotation.Nullable String trainSplit) {
    this.trainSplit = trainSplit;
    return this;
  }

  /**
   * Get trainSplit
   * @return trainSplit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRAIN_SPLIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTrainSplit() {
    return trainSplit;
  }


  @JsonProperty(JSON_PROPERTY_TRAIN_SPLIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTrainSplit(@javax.annotation.Nullable String trainSplit) {
    this.trainSplit = trainSplit;
  }


  public PromptimConfig devSplit(@javax.annotation.Nullable String devSplit) {
    this.devSplit = devSplit;
    return this;
  }

  /**
   * Get devSplit
   * @return devSplit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEV_SPLIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getDevSplit() {
    return devSplit;
  }


  @JsonProperty(JSON_PROPERTY_DEV_SPLIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDevSplit(@javax.annotation.Nullable String devSplit) {
    this.devSplit = devSplit;
  }


  public PromptimConfig testSplit(@javax.annotation.Nullable String testSplit) {
    this.testSplit = testSplit;
    return this;
  }

  /**
   * Get testSplit
   * @return testSplit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEST_SPLIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTestSplit() {
    return testSplit;
  }


  @JsonProperty(JSON_PROPERTY_TEST_SPLIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestSplit(@javax.annotation.Nullable String testSplit) {
    this.testSplit = testSplit;
  }


  public PromptimConfig evaluators(@javax.annotation.Nonnull List<UUID> evaluators) {
    this.evaluators = evaluators;
    return this;
  }

  public PromptimConfig addEvaluatorsItem(UUID evaluatorsItem) {
    if (this.evaluators == null) {
      this.evaluators = new ArrayList<>();
    }
    this.evaluators.add(evaluatorsItem);
    return this;
  }

  /**
   * Get evaluators
   * @return evaluators
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EVALUATORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<UUID> getEvaluators() {
    return evaluators;
  }


  @JsonProperty(JSON_PROPERTY_EVALUATORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEvaluators(@javax.annotation.Nonnull List<UUID> evaluators) {
    this.evaluators = evaluators;
  }


  public PromptimConfig numEpochs(@javax.annotation.Nonnull Integer numEpochs) {
    this.numEpochs = numEpochs;
    return this;
  }

  /**
   * Get numEpochs
   * @return numEpochs
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUM_EPOCHS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getNumEpochs() {
    return numEpochs;
  }


  @JsonProperty(JSON_PROPERTY_NUM_EPOCHS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumEpochs(@javax.annotation.Nonnull Integer numEpochs) {
    this.numEpochs = numEpochs;
  }


  public PromptimConfig autoCommit(@javax.annotation.Nonnull Boolean autoCommit) {
    this.autoCommit = autoCommit;
    return this;
  }

  /**
   * Get autoCommit
   * @return autoCommit
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTO_COMMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getAutoCommit() {
    return autoCommit;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_COMMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutoCommit(@javax.annotation.Nonnull Boolean autoCommit) {
    this.autoCommit = autoCommit;
  }


  /**
   * Return true if this PromptimConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PromptimConfig promptimConfig = (PromptimConfig) o;
    return Objects.equals(this.messageIndex, promptimConfig.messageIndex) &&
        Objects.equals(this.taskDescription, promptimConfig.taskDescription) &&
        Objects.equals(this.datasetName, promptimConfig.datasetName) &&
        Objects.equals(this.trainSplit, promptimConfig.trainSplit) &&
        Objects.equals(this.devSplit, promptimConfig.devSplit) &&
        Objects.equals(this.testSplit, promptimConfig.testSplit) &&
        Objects.equals(this.evaluators, promptimConfig.evaluators) &&
        Objects.equals(this.numEpochs, promptimConfig.numEpochs) &&
        Objects.equals(this.autoCommit, promptimConfig.autoCommit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageIndex, taskDescription, datasetName, trainSplit, devSplit, testSplit, evaluators, numEpochs, autoCommit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PromptimConfig {\n");
    sb.append("    messageIndex: ").append(toIndentedString(messageIndex)).append("\n");
    sb.append("    taskDescription: ").append(toIndentedString(taskDescription)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    trainSplit: ").append(toIndentedString(trainSplit)).append("\n");
    sb.append("    devSplit: ").append(toIndentedString(devSplit)).append("\n");
    sb.append("    testSplit: ").append(toIndentedString(testSplit)).append("\n");
    sb.append("    evaluators: ").append(toIndentedString(evaluators)).append("\n");
    sb.append("    numEpochs: ").append(toIndentedString(numEpochs)).append("\n");
    sb.append("    autoCommit: ").append(toIndentedString(autoCommit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `message_index` to the URL query string
    if (getMessageIndex() != null) {
      joiner.add(String.format("%smessage_index%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getMessageIndex()))));
    }

    // add `task_description` to the URL query string
    if (getTaskDescription() != null) {
      joiner.add(String.format("%stask_description%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTaskDescription()))));
    }

    // add `dataset_name` to the URL query string
    if (getDatasetName() != null) {
      joiner.add(String.format("%sdataset_name%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDatasetName()))));
    }

    // add `train_split` to the URL query string
    if (getTrainSplit() != null) {
      joiner.add(String.format("%strain_split%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTrainSplit()))));
    }

    // add `dev_split` to the URL query string
    if (getDevSplit() != null) {
      joiner.add(String.format("%sdev_split%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDevSplit()))));
    }

    // add `test_split` to the URL query string
    if (getTestSplit() != null) {
      joiner.add(String.format("%stest_split%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTestSplit()))));
    }

    // add `evaluators` to the URL query string
    if (getEvaluators() != null) {
      for (int i = 0; i < getEvaluators().size(); i++) {
        if (getEvaluators().get(i) != null) {
          joiner.add(String.format("%sevaluators%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              ApiClient.urlEncode(ApiClient.valueToString(getEvaluators().get(i)))));
        }
      }
    }

    // add `num_epochs` to the URL query string
    if (getNumEpochs() != null) {
      joiner.add(String.format("%snum_epochs%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getNumEpochs()))));
    }

    // add `auto_commit` to the URL query string
    if (getAutoCommit() != null) {
      joiner.add(String.format("%sauto_commit%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAutoCommit()))));
    }

    return joiner.toString();
  }

    public static class Builder {

    private PromptimConfig instance;

    public Builder() {
      this(new PromptimConfig());
    }

    protected Builder(PromptimConfig instance) {
      this.instance = instance;
    }

    public PromptimConfig.Builder messageIndex(Integer messageIndex) {
      this.instance.messageIndex = messageIndex;
      return this;
    }
    public PromptimConfig.Builder taskDescription(String taskDescription) {
      this.instance.taskDescription = taskDescription;
      return this;
    }
    public PromptimConfig.Builder datasetName(String datasetName) {
      this.instance.datasetName = datasetName;
      return this;
    }
    public PromptimConfig.Builder trainSplit(String trainSplit) {
      this.instance.trainSplit = trainSplit;
      return this;
    }
    public PromptimConfig.Builder devSplit(String devSplit) {
      this.instance.devSplit = devSplit;
      return this;
    }
    public PromptimConfig.Builder testSplit(String testSplit) {
      this.instance.testSplit = testSplit;
      return this;
    }
    public PromptimConfig.Builder evaluators(List<UUID> evaluators) {
      this.instance.evaluators = evaluators;
      return this;
    }
    public PromptimConfig.Builder numEpochs(Integer numEpochs) {
      this.instance.numEpochs = numEpochs;
      return this;
    }
    public PromptimConfig.Builder autoCommit(Boolean autoCommit) {
      this.instance.autoCommit = autoCommit;
      return this;
    }


    /**
    * returns a built PromptimConfig instance.
    *
    * The builder is not reusable.
    */
    public PromptimConfig build() {
      try {
        return this.instance;
      } finally {
        // ensure that this.instance is not reused
        this.instance = null;
      }
    }

    @Override
    public String toString() {
      return getClass() + "=(" + instance + ")";
    }
  }

  /**
  * Create a builder with no initialized field.
  */
  public static PromptimConfig.Builder builder() {
    return new PromptimConfig.Builder();
  }

  /**
  * Create a builder with a shallow copy of this instance.
  */
  public PromptimConfig.Builder toBuilder() {
    return new PromptimConfig.Builder()
      .messageIndex(getMessageIndex())
      .taskDescription(getTaskDescription())
      .datasetName(getDatasetName())
      .trainSplit(getTrainSplit())
      .devSplit(getDevSplit())
      .testSplit(getTestSplit())
      .evaluators(getEvaluators())
      .numEpochs(getNumEpochs())
      .autoCommit(getAutoCommit());
  }

}

