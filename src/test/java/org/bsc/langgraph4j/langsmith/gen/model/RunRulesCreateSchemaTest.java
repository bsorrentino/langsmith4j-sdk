/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.bsc.langgraph4j.langsmith.gen.model.CodeEvaluatorTopLevel;
import org.bsc.langgraph4j.langsmith.gen.model.EvaluatorTopLevel;
import org.bsc.langgraph4j.langsmith.gen.model.RunRulesPagerdutyAlertSchema;
import org.bsc.langgraph4j.langsmith.gen.model.RunRulesWebhookSchema;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for RunRulesCreateSchema
 */
class RunRulesCreateSchemaTest {
    private final RunRulesCreateSchema model = new RunRulesCreateSchema();

    /**
     * Model tests for RunRulesCreateSchema
     */
    @Test
    void testRunRulesCreateSchema() {
        // TODO: test RunRulesCreateSchema
    }

    /**
     * Test the property 'displayName'
     */
    @Test
    void displayNameTest() {
        // TODO: test displayName
    }

    /**
     * Test the property 'sessionId'
     */
    @Test
    void sessionIdTest() {
        // TODO: test sessionId
    }

    /**
     * Test the property 'isEnabled'
     */
    @Test
    void isEnabledTest() {
        // TODO: test isEnabled
    }

    /**
     * Test the property 'datasetId'
     */
    @Test
    void datasetIdTest() {
        // TODO: test datasetId
    }

    /**
     * Test the property 'samplingRate'
     */
    @Test
    void samplingRateTest() {
        // TODO: test samplingRate
    }

    /**
     * Test the property 'filter'
     */
    @Test
    void filterTest() {
        // TODO: test filter
    }

    /**
     * Test the property 'traceFilter'
     */
    @Test
    void traceFilterTest() {
        // TODO: test traceFilter
    }

    /**
     * Test the property 'treeFilter'
     */
    @Test
    void treeFilterTest() {
        // TODO: test treeFilter
    }

    /**
     * Test the property 'backfillFrom'
     */
    @Test
    void backfillFromTest() {
        // TODO: test backfillFrom
    }

    /**
     * Test the property 'useCorrectionsDataset'
     */
    @Test
    void useCorrectionsDatasetTest() {
        // TODO: test useCorrectionsDataset
    }

    /**
     * Test the property 'numFewShotExamples'
     */
    @Test
    void numFewShotExamplesTest() {
        // TODO: test numFewShotExamples
    }

    /**
     * Test the property 'extendOnly'
     */
    @Test
    void extendOnlyTest() {
        // TODO: test extendOnly
    }

    /**
     * Test the property '_transient'
     */
    @Test
    void _transientTest() {
        // TODO: test _transient
    }

    /**
     * Test the property 'addToAnnotationQueueId'
     */
    @Test
    void addToAnnotationQueueIdTest() {
        // TODO: test addToAnnotationQueueId
    }

    /**
     * Test the property 'addToDatasetId'
     */
    @Test
    void addToDatasetIdTest() {
        // TODO: test addToDatasetId
    }

    /**
     * Test the property 'addToDatasetPreferCorrection'
     */
    @Test
    void addToDatasetPreferCorrectionTest() {
        // TODO: test addToDatasetPreferCorrection
    }

    /**
     * Test the property 'evaluators'
     */
    @Test
    void evaluatorsTest() {
        // TODO: test evaluators
    }

    /**
     * Test the property 'codeEvaluators'
     */
    @Test
    void codeEvaluatorsTest() {
        // TODO: test codeEvaluators
    }

    /**
     * Test the property 'alerts'
     */
    @Test
    void alertsTest() {
        // TODO: test alerts
    }

    /**
     * Test the property 'webhooks'
     */
    @Test
    void webhooksTest() {
        // TODO: test webhooks
    }

    /**
     * Test the property 'evaluatorVersion'
     */
    @Test
    void evaluatorVersionTest() {
        // TODO: test evaluatorVersion
    }

    /**
     * Test the property 'createAlignmentQueue'
     */
    @Test
    void createAlignmentQueueTest() {
        // TODO: test createAlignmentQueue
    }

    /**
     * Test the property 'includeExtendedStats'
     */
    @Test
    void includeExtendedStatsTest() {
        // TODO: test includeExtendedStats
    }

}
