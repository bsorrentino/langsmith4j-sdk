/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for RunGroupStats
 */
class RunGroupStatsTest {
    private final RunGroupStats model = new RunGroupStats();

    /**
     * Model tests for RunGroupStats
     */
    @Test
    void testRunGroupStats() {
        // TODO: test RunGroupStats
    }

    /**
     * Test the property 'runCount'
     */
    @Test
    void runCountTest() {
        // TODO: test runCount
    }

    /**
     * Test the property 'latencyP50'
     */
    @Test
    void latencyP50Test() {
        // TODO: test latencyP50
    }

    /**
     * Test the property 'latencyP99'
     */
    @Test
    void latencyP99Test() {
        // TODO: test latencyP99
    }

    /**
     * Test the property 'firstTokenP50'
     */
    @Test
    void firstTokenP50Test() {
        // TODO: test firstTokenP50
    }

    /**
     * Test the property 'firstTokenP99'
     */
    @Test
    void firstTokenP99Test() {
        // TODO: test firstTokenP99
    }

    /**
     * Test the property 'totalTokens'
     */
    @Test
    void totalTokensTest() {
        // TODO: test totalTokens
    }

    /**
     * Test the property 'promptTokens'
     */
    @Test
    void promptTokensTest() {
        // TODO: test promptTokens
    }

    /**
     * Test the property 'completionTokens'
     */
    @Test
    void completionTokensTest() {
        // TODO: test completionTokens
    }

    /**
     * Test the property 'medianTokens'
     */
    @Test
    void medianTokensTest() {
        // TODO: test medianTokens
    }

    /**
     * Test the property 'completionTokensP50'
     */
    @Test
    void completionTokensP50Test() {
        // TODO: test completionTokensP50
    }

    /**
     * Test the property 'promptTokensP50'
     */
    @Test
    void promptTokensP50Test() {
        // TODO: test promptTokensP50
    }

    /**
     * Test the property 'tokensP99'
     */
    @Test
    void tokensP99Test() {
        // TODO: test tokensP99
    }

    /**
     * Test the property 'completionTokensP99'
     */
    @Test
    void completionTokensP99Test() {
        // TODO: test completionTokensP99
    }

    /**
     * Test the property 'promptTokensP99'
     */
    @Test
    void promptTokensP99Test() {
        // TODO: test promptTokensP99
    }

    /**
     * Test the property 'lastRunStartTime'
     */
    @Test
    void lastRunStartTimeTest() {
        // TODO: test lastRunStartTime
    }

    /**
     * Test the property 'feedbackStats'
     */
    @Test
    void feedbackStatsTest() {
        // TODO: test feedbackStats
    }

    /**
     * Test the property 'runFacets'
     */
    @Test
    void runFacetsTest() {
        // TODO: test runFacets
    }

    /**
     * Test the property 'errorRate'
     */
    @Test
    void errorRateTest() {
        // TODO: test errorRate
    }

    /**
     * Test the property 'streamingRate'
     */
    @Test
    void streamingRateTest() {
        // TODO: test streamingRate
    }

    /**
     * Test the property 'totalCost'
     */
    @Test
    void totalCostTest() {
        // TODO: test totalCost
    }

    /**
     * Test the property 'promptCost'
     */
    @Test
    void promptCostTest() {
        // TODO: test promptCost
    }

    /**
     * Test the property 'completionCost'
     */
    @Test
    void completionCostTest() {
        // TODO: test completionCost
    }

    /**
     * Test the property 'costP50'
     */
    @Test
    void costP50Test() {
        // TODO: test costP50
    }

    /**
     * Test the property 'costP99'
     */
    @Test
    void costP99Test() {
        // TODO: test costP99
    }

    /**
     * Test the property 'groupCount'
     */
    @Test
    void groupCountTest() {
        // TODO: test groupCount
    }

}
