/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.api;

import org.bsc.langgraph4j.langsmith.gen.ApiException;
import org.bsc.langgraph4j.langsmith.gen.model.RunsBatchPostRequest;
import org.bsc.langgraph4j.langsmith.gen.model.RunsPost202ResponseValue;
import org.bsc.langgraph4j.langsmith.gen.model.RunsRun;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * API tests for RunsApi
 */
@Disabled
public class RunsApiTest {

    private final RunsApi api = new RunsApi();

    
    /**
     * Ingest Runs (Batch JSON)
     *
     * Ingests a batch of runs in a single JSON payload. The payload must have &#x60;post&#x60; and/or &#x60;patch&#x60; arrays containing run objects. Prefer this endpoint over single‑run ingestion when submitting hundreds of runs, but &#x60;/runs/multipart&#x60; offers better handling for very large fields and attachments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsBatchPostTest() throws ApiException {
        RunsBatchPostRequest runsBatchPostRequest = null;
        CompletableFuture<Map<String, RunsPost202ResponseValue>> response = 
        api.runsBatchPost(runsBatchPostRequest);
        
        // TODO: test validations
    }
    
    /**
     * Ingest Runs (Multipart)
     *
     * Ingests multiple runs, feedback objects, and binary attachments in a single &#x60;multipart/form-data&#x60; request. **Part‑name pattern**: &#x60;&lt;event&gt;.&lt;run_id&gt;[.&lt;field&gt;]&#x60; where &#x60;event&#x60; ∈ {&#x60;post&#x60;, &#x60;patch&#x60;, &#x60;feedback&#x60;, &#x60;attachment&#x60;}. * &#x60;post|patch.&lt;run_id&gt;&#x60; – JSON run payload. * &#x60;post|patch.&lt;run_id&gt;.&lt;field&gt;&#x60; – out‑of‑band run data (&#x60;inputs&#x60;, &#x60;outputs&#x60;, &#x60;events&#x60;, &#x60;error&#x60;, &#x60;extra&#x60;, &#x60;serialized&#x60;). * &#x60;feedback.&lt;run_id&gt;&#x60; – JSON feedback payload (must include &#x60;trace_id&#x60;). * &#x60;attachment.&lt;run_id&gt;.&lt;filename&gt;&#x60; – arbitrary binary attachment stored in S3. **Headers**: every part must set &#x60;Content-Type&#x60; **and** either a &#x60;Content-Length&#x60; header or &#x60;length&#x60; parameter. Per‑part &#x60;Content-Encoding&#x60; is **not** allowed; the top‑level request may be &#x60;Content-Encoding: zstd&#x60;. **Best performance** for high‑volume ingestion.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsMultipartPostTest() throws ApiException {
        File postLeftCurlyBracketRunIdRightCurlyBracket = null;
        File patchLeftCurlyBracketRunIdRightCurlyBracket = null;
        File postLeftCurlyBracketRunIdRightCurlyBracketInputs = null;
        File patchLeftCurlyBracketRunIdRightCurlyBracketOutputs = null;
        File feedbackLeftCurlyBracketRunIdRightCurlyBracket = null;
        File attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket = null;
        CompletableFuture<Map<String, String>> response = 
        api.runsMultipartPost(postLeftCurlyBracketRunIdRightCurlyBracket, patchLeftCurlyBracketRunIdRightCurlyBracket, postLeftCurlyBracketRunIdRightCurlyBracketInputs, patchLeftCurlyBracketRunIdRightCurlyBracketOutputs, feedbackLeftCurlyBracketRunIdRightCurlyBracket, attachmentLeftCurlyBracketRunIdRightCurlyBracketLeftCurlyBracketFilenameRightCurlyBracket);
        
        // TODO: test validations
    }
    
    /**
     * Create a Run
     *
     * Queues a single run for ingestion. The request body must be a JSON-encoded run object that follows the Run schema.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsPostTest() throws ApiException {
        RunsRun runsRun = null;
        CompletableFuture<Map<String, RunsPost202ResponseValue>> response = 
        api.runsPost(runsRun);
        
        // TODO: test validations
    }
    
    /**
     * Update a Run
     *
     * Updates a run identified by its ID. The body should contain only the fields to be changed; unknown fields are ignored.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsRunIdPatchTest() throws ApiException {

        // TODO: test validations
    }
    
}
