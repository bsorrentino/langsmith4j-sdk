/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.bsc.langgraph4j.langsmith.gen.model.RunTypeEnum;
import org.bsc.langgraph4j.langsmith.gen.model.TraceTier;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for RunSchema
 */
class RunSchemaTest {
    private final RunSchema model = new RunSchema();

    /**
     * Model tests for RunSchema
     */
    @Test
    void testRunSchema() {
        // TODO: test RunSchema
    }

    /**
     * Test the property 'name'
     */
    @Test
    void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'inputs'
     */
    @Test
    void inputsTest() {
        // TODO: test inputs
    }

    /**
     * Test the property 'inputsPreview'
     */
    @Test
    void inputsPreviewTest() {
        // TODO: test inputsPreview
    }

    /**
     * Test the property 'runType'
     */
    @Test
    void runTypeTest() {
        // TODO: test runType
    }

    /**
     * Test the property 'startTime'
     */
    @Test
    void startTimeTest() {
        // TODO: test startTime
    }

    /**
     * Test the property 'endTime'
     */
    @Test
    void endTimeTest() {
        // TODO: test endTime
    }

    /**
     * Test the property 'extra'
     */
    @Test
    void extraTest() {
        // TODO: test extra
    }

    /**
     * Test the property 'error'
     */
    @Test
    void errorTest() {
        // TODO: test error
    }

    /**
     * Test the property 'executionOrder'
     */
    @Test
    void executionOrderTest() {
        // TODO: test executionOrder
    }

    /**
     * Test the property 'serialized'
     */
    @Test
    void serializedTest() {
        // TODO: test serialized
    }

    /**
     * Test the property 'outputs'
     */
    @Test
    void outputsTest() {
        // TODO: test outputs
    }

    /**
     * Test the property 'outputsPreview'
     */
    @Test
    void outputsPreviewTest() {
        // TODO: test outputsPreview
    }

    /**
     * Test the property 'parentRunId'
     */
    @Test
    void parentRunIdTest() {
        // TODO: test parentRunId
    }

    /**
     * Test the property 'manifestId'
     */
    @Test
    void manifestIdTest() {
        // TODO: test manifestId
    }

    /**
     * Test the property 'manifestS3Id'
     */
    @Test
    void manifestS3IdTest() {
        // TODO: test manifestS3Id
    }

    /**
     * Test the property 'events'
     */
    @Test
    void eventsTest() {
        // TODO: test events
    }

    /**
     * Test the property 'tags'
     */
    @Test
    void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'inputsS3Urls'
     */
    @Test
    void inputsS3UrlsTest() {
        // TODO: test inputsS3Urls
    }

    /**
     * Test the property 'outputsS3Urls'
     */
    @Test
    void outputsS3UrlsTest() {
        // TODO: test outputsS3Urls
    }

    /**
     * Test the property 's3Urls'
     */
    @Test
    void s3UrlsTest() {
        // TODO: test s3Urls
    }

    /**
     * Test the property 'traceId'
     */
    @Test
    void traceIdTest() {
        // TODO: test traceId
    }

    /**
     * Test the property 'dottedOrder'
     */
    @Test
    void dottedOrderTest() {
        // TODO: test dottedOrder
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'status'
     */
    @Test
    void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'childRunIds'
     */
    @Test
    void childRunIdsTest() {
        // TODO: test childRunIds
    }

    /**
     * Test the property 'directChildRunIds'
     */
    @Test
    void directChildRunIdsTest() {
        // TODO: test directChildRunIds
    }

    /**
     * Test the property 'parentRunIds'
     */
    @Test
    void parentRunIdsTest() {
        // TODO: test parentRunIds
    }

    /**
     * Test the property 'feedbackStats'
     */
    @Test
    void feedbackStatsTest() {
        // TODO: test feedbackStats
    }

    /**
     * Test the property 'referenceExampleId'
     */
    @Test
    void referenceExampleIdTest() {
        // TODO: test referenceExampleId
    }

    /**
     * Test the property 'totalTokens'
     */
    @Test
    void totalTokensTest() {
        // TODO: test totalTokens
    }

    /**
     * Test the property 'promptTokens'
     */
    @Test
    void promptTokensTest() {
        // TODO: test promptTokens
    }

    /**
     * Test the property 'completionTokens'
     */
    @Test
    void completionTokensTest() {
        // TODO: test completionTokens
    }

    /**
     * Test the property 'promptTokenDetails'
     */
    @Test
    void promptTokenDetailsTest() {
        // TODO: test promptTokenDetails
    }

    /**
     * Test the property 'completionTokenDetails'
     */
    @Test
    void completionTokenDetailsTest() {
        // TODO: test completionTokenDetails
    }

    /**
     * Test the property 'totalCost'
     */
    @Test
    void totalCostTest() {
        // TODO: test totalCost
    }

    /**
     * Test the property 'promptCost'
     */
    @Test
    void promptCostTest() {
        // TODO: test promptCost
    }

    /**
     * Test the property 'completionCost'
     */
    @Test
    void completionCostTest() {
        // TODO: test completionCost
    }

    /**
     * Test the property 'promptCostDetails'
     */
    @Test
    void promptCostDetailsTest() {
        // TODO: test promptCostDetails
    }

    /**
     * Test the property 'completionCostDetails'
     */
    @Test
    void completionCostDetailsTest() {
        // TODO: test completionCostDetails
    }

    /**
     * Test the property 'priceModelId'
     */
    @Test
    void priceModelIdTest() {
        // TODO: test priceModelId
    }

    /**
     * Test the property 'firstTokenTime'
     */
    @Test
    void firstTokenTimeTest() {
        // TODO: test firstTokenTime
    }

    /**
     * Test the property 'sessionId'
     */
    @Test
    void sessionIdTest() {
        // TODO: test sessionId
    }

    /**
     * Test the property 'appPath'
     */
    @Test
    void appPathTest() {
        // TODO: test appPath
    }

    /**
     * Test the property 'lastQueuedAt'
     */
    @Test
    void lastQueuedAtTest() {
        // TODO: test lastQueuedAt
    }

    /**
     * Test the property 'inDataset'
     */
    @Test
    void inDatasetTest() {
        // TODO: test inDataset
    }

    /**
     * Test the property 'shareToken'
     */
    @Test
    void shareTokenTest() {
        // TODO: test shareToken
    }

    /**
     * Test the property 'traceTier'
     */
    @Test
    void traceTierTest() {
        // TODO: test traceTier
    }

    /**
     * Test the property 'traceFirstReceivedAt'
     */
    @Test
    void traceFirstReceivedAtTest() {
        // TODO: test traceFirstReceivedAt
    }

    /**
     * Test the property 'ttlSeconds'
     */
    @Test
    void ttlSecondsTest() {
        // TODO: test ttlSeconds
    }

    /**
     * Test the property 'traceUpgrade'
     */
    @Test
    void traceUpgradeTest() {
        // TODO: test traceUpgrade
    }

    /**
     * Test the property 'referenceDatasetId'
     */
    @Test
    void referenceDatasetIdTest() {
        // TODO: test referenceDatasetId
    }

    /**
     * Test the property 'threadId'
     */
    @Test
    void threadIdTest() {
        // TODO: test threadId
    }

}
