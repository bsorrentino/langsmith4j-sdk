/*
 * LangSmith
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.bsc.langgraph4j.langsmith.gen.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.bsc.langgraph4j.langsmith.gen.model.RunDateOrder;
import org.bsc.langgraph4j.langsmith.gen.model.RunSelect;
import org.bsc.langgraph4j.langsmith.gen.model.RunTypeEnum;
import org.bsc.langgraph4j.langsmith.gen.model.RunsFilterDataSourceTypeEnum;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for BodyParamsForRunSchema
 */
class BodyParamsForRunSchemaTest {
    private final BodyParamsForRunSchema model = new BodyParamsForRunSchema();

    /**
     * Model tests for BodyParamsForRunSchema
     */
    @Test
    void testBodyParamsForRunSchema() {
        // TODO: test BodyParamsForRunSchema
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'trace'
     */
    @Test
    void traceTest() {
        // TODO: test trace
    }

    /**
     * Test the property 'parentRun'
     */
    @Test
    void parentRunTest() {
        // TODO: test parentRun
    }

    /**
     * Test the property 'runType'
     */
    @Test
    void runTypeTest() {
        // TODO: test runType
    }

    /**
     * Test the property 'session'
     */
    @Test
    void sessionTest() {
        // TODO: test session
    }

    /**
     * Test the property 'referenceExample'
     */
    @Test
    void referenceExampleTest() {
        // TODO: test referenceExample
    }

    /**
     * Test the property 'executionOrder'
     */
    @Test
    void executionOrderTest() {
        // TODO: test executionOrder
    }

    /**
     * Test the property 'startTime'
     */
    @Test
    void startTimeTest() {
        // TODO: test startTime
    }

    /**
     * Test the property 'endTime'
     */
    @Test
    void endTimeTest() {
        // TODO: test endTime
    }

    /**
     * Test the property 'error'
     */
    @Test
    void errorTest() {
        // TODO: test error
    }

    /**
     * Test the property 'query'
     */
    @Test
    void queryTest() {
        // TODO: test query
    }

    /**
     * Test the property 'filter'
     */
    @Test
    void filterTest() {
        // TODO: test filter
    }

    /**
     * Test the property 'traceFilter'
     */
    @Test
    void traceFilterTest() {
        // TODO: test traceFilter
    }

    /**
     * Test the property 'treeFilter'
     */
    @Test
    void treeFilterTest() {
        // TODO: test treeFilter
    }

    /**
     * Test the property 'isRoot'
     */
    @Test
    void isRootTest() {
        // TODO: test isRoot
    }

    /**
     * Test the property 'dataSourceType'
     */
    @Test
    void dataSourceTypeTest() {
        // TODO: test dataSourceType
    }

    /**
     * Test the property 'skipPagination'
     */
    @Test
    void skipPaginationTest() {
        // TODO: test skipPagination
    }

    /**
     * Test the property 'searchFilter'
     */
    @Test
    void searchFilterTest() {
        // TODO: test searchFilter
    }

    /**
     * Test the property 'useExperimentalSearch'
     */
    @Test
    void useExperimentalSearchTest() {
        // TODO: test useExperimentalSearch
    }

    /**
     * Test the property 'cursor'
     */
    @Test
    void cursorTest() {
        // TODO: test cursor
    }

    /**
     * Test the property 'limit'
     */
    @Test
    void limitTest() {
        // TODO: test limit
    }

    /**
     * Test the property 'select'
     */
    @Test
    void selectTest() {
        // TODO: test select
    }

    /**
     * Test the property 'order'
     */
    @Test
    void orderTest() {
        // TODO: test order
    }

    /**
     * Test the property 'skipPrevCursor'
     */
    @Test
    void skipPrevCursorTest() {
        // TODO: test skipPrevCursor
    }

}
